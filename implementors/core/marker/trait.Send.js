(function() {var implementors = {};
implementors["actix"] = [{"text":"impl Send for ActorState","synthetic":true,"types":[]},{"text":"impl Send for Running","synthetic":true,"types":[]},{"text":"impl Send for SpawnHandle","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for Context&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for ContextParts&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; !Send for ContextFut&lt;A, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for MessageResult&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Message&gt;::Result: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; !Send for Response&lt;I, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, I, E&gt; !Send for ActorResponse&lt;A, I, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for Supervisor&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for AddressSender&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for AddressReceiver&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Envelope&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, M&gt; Send for Request&lt;A, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Message&gt;::Result: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for RecipientRequest&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MailboxError","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Addr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for WeakAddr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for Recipient&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Mailbox&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Mocker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Resolve","synthetic":true,"types":[]},{"text":"impl Send for Connect","synthetic":true,"types":[]},{"text":"impl Send for ConnectAddr","synthetic":true,"types":[]},{"text":"impl Send for ResolverError","synthetic":true,"types":[]},{"text":"impl Send for Resolver","synthetic":true,"types":[]},{"text":"impl !Send for TcpConnector","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Finish&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; Send for Ready&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E, A&gt; Send for FutureResult&lt;T, E, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StreamFinish&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; Send for StreamFold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoActorFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for StreamMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for StreamThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoActorFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StreamTimeout&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoActorFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Timeout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, A&gt; Send for FutureWrap&lt;F, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, A&gt; Send for StreamWrap&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !Send for Writer&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; !Send for FramedWrite&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; !Send for SinkWrite&lt;I, S&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Registry","synthetic":true,"types":[]},{"text":"impl Send for SystemRegistry","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SyncArbiter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for SyncContext&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Condition&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for TimerFunc&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for IntervalFunc&lt;A&gt;","synthetic":true,"types":[]}];
implementors["actix_codec"] = [{"text":"impl Send for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["actix_connect"] = [{"text":"impl&lt;T&gt; Send for Connect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Connection&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TcpConnectorFactory&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TcpConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ResolverFactory&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Resolver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ConnectServiceFactory&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ConnectService&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TcpConnectService&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["actix_http"] = [{"text":"impl Send for BodySize","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Send for ResponseBody&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Body","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Send for BodyStream&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SizedStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, X&nbsp;=&nbsp;ExpectHandler, U&nbsp;=&nbsp;UpgradeHandler&lt;T&gt;&gt; !Send for HttpServiceBuilder&lt;T, S, X, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Connector&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectError","synthetic":true,"types":[]},{"text":"impl Send for InvalidUrl","synthetic":true,"types":[]},{"text":"impl !Send for SendRequestError","synthetic":true,"types":[]},{"text":"impl Send for FreezeRequestError","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]},{"text":"impl Send for Connect","synthetic":true,"types":[]},{"text":"impl Send for KeepAlive","synthetic":true,"types":[]},{"text":"impl !Send for ServiceConfig","synthetic":true,"types":[]},{"text":"impl !Send for Extensions","synthetic":true,"types":[]},{"text":"impl Send for AcceptCharset","synthetic":true,"types":[]},{"text":"impl Send for AcceptLanguage","synthetic":true,"types":[]},{"text":"impl Send for Accept","synthetic":true,"types":[]},{"text":"impl Send for Allow","synthetic":true,"types":[]},{"text":"impl Send for CacheControl","synthetic":true,"types":[]},{"text":"impl Send for CacheDirective","synthetic":true,"types":[]},{"text":"impl Send for DispositionType","synthetic":true,"types":[]},{"text":"impl Send for DispositionParam","synthetic":true,"types":[]},{"text":"impl Send for ContentDisposition","synthetic":true,"types":[]},{"text":"impl Send for ContentLanguage","synthetic":true,"types":[]},{"text":"impl Send for ContentRange","synthetic":true,"types":[]},{"text":"impl Send for ContentRangeSpec","synthetic":true,"types":[]},{"text":"impl Send for ContentType","synthetic":true,"types":[]},{"text":"impl Send for Date","synthetic":true,"types":[]},{"text":"impl Send for ETag","synthetic":true,"types":[]},{"text":"impl Send for Expires","synthetic":true,"types":[]},{"text":"impl Send for IfMatch","synthetic":true,"types":[]},{"text":"impl Send for IfModifiedSince","synthetic":true,"types":[]},{"text":"impl Send for IfNoneMatch","synthetic":true,"types":[]},{"text":"impl Send for IfRange","synthetic":true,"types":[]},{"text":"impl Send for IfUnmodifiedSince","synthetic":true,"types":[]},{"text":"impl Send for LastModified","synthetic":true,"types":[]},{"text":"impl Send for HeaderMap","synthetic":true,"types":[]},{"text":"impl Send for ContentEncoding","synthetic":true,"types":[]},{"text":"impl Send for ExtendedValue","synthetic":true,"types":[]},{"text":"impl Send for ConnectionType","synthetic":true,"types":[]},{"text":"impl !Send for RequestHead","synthetic":true,"types":[]},{"text":"impl !Send for RequestHeadType","synthetic":true,"types":[]},{"text":"impl !Send for ResponseHead","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Message&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;Pin&lt;Box&lt;dyn Stream&lt;Item = Result&lt;Bytes, PayloadError&gt;&gt; + 'static, Global&gt;&gt;&gt; !Send for Payload&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&nbsp;=&nbsp;Pin&lt;Box&lt;dyn Stream&lt;Item = Result&lt;Bytes, PayloadError&gt;&gt; + 'static, Global&gt;&gt;&gt; !Send for Request&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&nbsp;=&nbsp;Body&gt; !Send for Response&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ResponseBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T, S, B, X&nbsp;=&nbsp;ExpectHandler, U&nbsp;=&nbsp;UpgradeHandler&lt;T&gt;&gt; !Send for HttpService&lt;T, S, B, X, U&gt;","synthetic":true,"types":[]},{"text":"impl Send for CookieBuilder","synthetic":true,"types":[]},{"text":"impl Send for SameSite","synthetic":true,"types":[]},{"text":"impl Send for CookieJar","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Delta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; Send for Cookie&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'c&gt; Send for EncodedCookie&lt;'a, 'c&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for PayloadError","synthetic":true,"types":[]},{"text":"impl !Send for DispatchError","synthetic":true,"types":[]},{"text":"impl Send for ContentTypeError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for InternalError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ClientCodec","synthetic":true,"types":[]},{"text":"impl !Send for ClientPayloadCodec","synthetic":true,"types":[]},{"text":"impl !Send for Codec","synthetic":true,"types":[]},{"text":"impl&lt;T, S, B, X, U&gt; !Send for Dispatcher&lt;T, S, B, X, U&gt;","synthetic":true,"types":[]},{"text":"impl Send for ExpectHandler","synthetic":true,"types":[]},{"text":"impl !Send for Payload","synthetic":true,"types":[]},{"text":"impl&lt;T, S, B, X&nbsp;=&nbsp;ExpectHandler, U&nbsp;=&nbsp;UpgradeHandler&lt;T&gt;&gt; !Send for H1Service&lt;T, S, B, X, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S, B, X, U&gt; !Send for H1ServiceHandler&lt;T, S, B, X, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for OneRequest&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UpgradeHandler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !Send for SendResponse&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Message&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MessageType","synthetic":true,"types":[]},{"text":"impl&lt;T, S, B&gt; !Send for Dispatcher&lt;T, S, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S, B&gt; !Send for H2Service&lt;T, S, B&gt;","synthetic":true,"types":[]},{"text":"impl Send for Payload","synthetic":true,"types":[]},{"text":"impl !Send for TestRequest","synthetic":true,"types":[]},{"text":"impl Send for TestBuffer","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl Send for Item","synthetic":true,"types":[]},{"text":"impl Send for Codec","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; !Send for Dispatcher&lt;S, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for OpCode","synthetic":true,"types":[]},{"text":"impl Send for CloseCode","synthetic":true,"types":[]},{"text":"impl Send for CloseReason","synthetic":true,"types":[]},{"text":"impl Send for ProtocolError","synthetic":true,"types":[]},{"text":"impl Send for HandshakeError","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]}];
implementors["actix_rt"] = [{"text":"impl Send for Arbiter","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl !Send for SystemRunner","synthetic":true,"types":[]},{"text":"impl !Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for System","synthetic":true,"types":[]}];
implementors["actix_service"] = [{"text":"impl&lt;T, F, R, In, Out, Err&gt; Send for Apply&lt;T, F, R, In, Out, Err&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;In: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R, In, Out, Err&gt; Send for ApplyServiceFactory&lt;T, F, R, In, Out, Err&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;In: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Out: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, Req, Res, Err, InitErr&gt; !Send for BoxServiceFactory&lt;C, Req, Res, Err, InitErr&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, Fut, Req, Res, Err&gt; Send for FnService&lt;F, Fut, Req, Res, Err&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, Fut, Req, Res, Err, Cfg&gt; Send for FnServiceFactory&lt;F, Fut, Req, Res, Err, Cfg&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Cfg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, Fut, Cfg, Srv, Err&gt; Send for FnServiceConfig&lt;F, Fut, Cfg, Srv, Err&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Cfg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Err: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Srv: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, C, S, R, E&gt; Send for FnServiceNoConfig&lt;F, C, S, R, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F, Response&gt; Send for Map&lt;A, F, Response&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Response: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F, Res&gt; Send for MapServiceFactory&lt;A, F, Res&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Res: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F, C&gt; Send for MapConfig&lt;A, F, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; Send for UnitConfig&lt;A, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F, E&gt; Send for MapErr&lt;A, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F, E&gt; Send for MapErrServiceFactory&lt;A, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F, E&gt; Send for MapInitErr&lt;A, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pipeline&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PipelineFactory&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !Send for ApplyTransform&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S, F, E&gt; Send for TransformMapInitErr&lt;T, S, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["actix_threadpool"] = [{"text":"impl&lt;E&gt; Send for BlockingError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for CpuFuture&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["actix_utils"] = [{"text":"impl !Send for Condition","synthetic":true,"types":[]},{"text":"impl !Send for Waiter","synthetic":true,"types":[]},{"text":"impl !Send for Counter","synthetic":true,"types":[]},{"text":"impl !Send for CounterGuard","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherService&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, U&gt; Send for DispatcherError&lt;E, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Decoder&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Encoder&gt;::Error: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Message&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T, U&gt; !Send for Dispatcher&lt;S, T, U&gt;","synthetic":true,"types":[]},{"text":"impl Send for InFlight","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Send for InFlightService&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, E, F&gt; !Send for KeepAlive&lt;R, E, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, E, F&gt; !Send for KeepAliveService&lt;R, E, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Pool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for PSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for PReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for InOrderError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for InOrder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Send for InOrderService&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; !Send for Dispatcher&lt;S, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalWaker","synthetic":true,"types":[]},{"text":"impl !Send for LowResTime","synthetic":true,"types":[]},{"text":"impl !Send for LowResTimeService","synthetic":true,"types":[]},{"text":"impl !Send for SystemTime","synthetic":true,"types":[]},{"text":"impl !Send for SystemTimeService","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Timeout&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for TimeoutError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TimeoutService&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TimeoutServiceResponse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Service&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["addr2line"] = [{"text":"impl&lt;R&gt; Send for Context&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; !Send for LocationRangeIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; !Send for FrameIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Send for Frame&lt;'ctx, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FunctionName&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Location&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Send for Adler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Send for AHasher","synthetic":true,"types":[]},{"text":"impl Send for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Send for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Send for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Send for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["atk"] = [{"text":"impl !Send for Action","synthetic":true,"types":[]},{"text":"impl !Send for Component","synthetic":true,"types":[]},{"text":"impl !Send for Document","synthetic":true,"types":[]},{"text":"impl !Send for EditableText","synthetic":true,"types":[]},{"text":"impl !Send for GObjectAccessible","synthetic":true,"types":[]},{"text":"impl !Send for Hyperlink","synthetic":true,"types":[]},{"text":"impl !Send for HyperlinkImpl","synthetic":true,"types":[]},{"text":"impl !Send for Hypertext","synthetic":true,"types":[]},{"text":"impl !Send for Image","synthetic":true,"types":[]},{"text":"impl !Send for Misc","synthetic":true,"types":[]},{"text":"impl !Send for NoOpObject","synthetic":true,"types":[]},{"text":"impl !Send for NoOpObjectFactory","synthetic":true,"types":[]},{"text":"impl !Send for Object","synthetic":true,"types":[]},{"text":"impl !Send for ObjectFactory","synthetic":true,"types":[]},{"text":"impl !Send for Plug","synthetic":true,"types":[]},{"text":"impl !Send for Registry","synthetic":true,"types":[]},{"text":"impl !Send for Relation","synthetic":true,"types":[]},{"text":"impl !Send for RelationSet","synthetic":true,"types":[]},{"text":"impl !Send for Selection","synthetic":true,"types":[]},{"text":"impl !Send for Socket","synthetic":true,"types":[]},{"text":"impl !Send for StateSet","synthetic":true,"types":[]},{"text":"impl !Send for StreamableContent","synthetic":true,"types":[]},{"text":"impl !Send for Table","synthetic":true,"types":[]},{"text":"impl !Send for TableCell","synthetic":true,"types":[]},{"text":"impl !Send for Text","synthetic":true,"types":[]},{"text":"impl !Send for Util","synthetic":true,"types":[]},{"text":"impl !Send for Value","synthetic":true,"types":[]},{"text":"impl !Send for Window","synthetic":true,"types":[]},{"text":"impl !Send for Range","synthetic":true,"types":[]},{"text":"impl !Send for Rectangle","synthetic":true,"types":[]},{"text":"impl !Send for TextRange","synthetic":true,"types":[]},{"text":"impl Send for CoordType","synthetic":true,"types":[]},{"text":"impl Send for Layer","synthetic":true,"types":[]},{"text":"impl Send for RelationType","synthetic":true,"types":[]},{"text":"impl Send for Role","synthetic":true,"types":[]},{"text":"impl Send for StateType","synthetic":true,"types":[]},{"text":"impl Send for TextAttribute","synthetic":true,"types":[]},{"text":"impl Send for TextBoundary","synthetic":true,"types":[]},{"text":"impl Send for TextClipType","synthetic":true,"types":[]},{"text":"impl Send for TextGranularity","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for HyperlinkStateFlags","synthetic":true,"types":[]},{"text":"impl Send for Attribute","synthetic":true,"types":[]},{"text":"impl Send for TextRectangle","synthetic":true,"types":[]},{"text":"impl Send for GObjectAccessibleClass","synthetic":false,"types":[]},{"text":"impl Send for HyperlinkClass","synthetic":false,"types":[]},{"text":"impl Send for MiscClass","synthetic":false,"types":[]},{"text":"impl Send for NoOpObjectClass","synthetic":false,"types":[]},{"text":"impl Send for NoOpObjectFactoryClass","synthetic":false,"types":[]},{"text":"impl Send for ObjectClass","synthetic":false,"types":[]},{"text":"impl Send for ObjectFactoryClass","synthetic":false,"types":[]},{"text":"impl Send for PlugClass","synthetic":false,"types":[]},{"text":"impl Send for RegistryClass","synthetic":false,"types":[]},{"text":"impl Send for RelationClass","synthetic":false,"types":[]},{"text":"impl Send for RelationSetClass","synthetic":false,"types":[]},{"text":"impl Send for SocketClass","synthetic":false,"types":[]},{"text":"impl Send for StateSetClass","synthetic":false,"types":[]},{"text":"impl Send for UtilClass","synthetic":false,"types":[]}];
implementors["atk_sys"] = [{"text":"impl Send for AtkActionIface","synthetic":true,"types":[]},{"text":"impl !Send for AtkAttribute","synthetic":true,"types":[]},{"text":"impl Send for AtkComponentIface","synthetic":true,"types":[]},{"text":"impl Send for AtkDocumentIface","synthetic":true,"types":[]},{"text":"impl Send for AtkEditableTextIface","synthetic":true,"types":[]},{"text":"impl !Send for AtkGObjectAccessibleClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkHyperlinkClass","synthetic":true,"types":[]},{"text":"impl Send for AtkHyperlinkImplIface","synthetic":true,"types":[]},{"text":"impl Send for AtkHypertextIface","synthetic":true,"types":[]},{"text":"impl Send for AtkImageIface","synthetic":true,"types":[]},{"text":"impl Send for _AtkImplementor","synthetic":true,"types":[]},{"text":"impl !Send for AtkKeyEventStruct","synthetic":true,"types":[]},{"text":"impl !Send for AtkMiscClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkNoOpObjectClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkNoOpObjectFactoryClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkObjectClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkObjectFactoryClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkPlugClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkPropertyValues","synthetic":true,"types":[]},{"text":"impl Send for AtkRange","synthetic":true,"types":[]},{"text":"impl Send for AtkRectangle","synthetic":true,"types":[]},{"text":"impl !Send for AtkRegistryClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkRelationClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkRelationSetClass","synthetic":true,"types":[]},{"text":"impl Send for AtkSelectionIface","synthetic":true,"types":[]},{"text":"impl !Send for AtkSocketClass","synthetic":true,"types":[]},{"text":"impl !Send for AtkStateSetClass","synthetic":true,"types":[]},{"text":"impl Send for AtkStreamableContentIface","synthetic":true,"types":[]},{"text":"impl Send for AtkTableCellIface","synthetic":true,"types":[]},{"text":"impl Send for AtkTableIface","synthetic":true,"types":[]},{"text":"impl Send for AtkTextIface","synthetic":true,"types":[]},{"text":"impl !Send for AtkTextRange","synthetic":true,"types":[]},{"text":"impl Send for AtkTextRectangle","synthetic":true,"types":[]},{"text":"impl !Send for AtkUtilClass","synthetic":true,"types":[]},{"text":"impl Send for AtkValueIface","synthetic":true,"types":[]},{"text":"impl Send for AtkWindowIface","synthetic":true,"types":[]},{"text":"impl !Send for AtkGObjectAccessible","synthetic":true,"types":[]},{"text":"impl !Send for AtkHyperlink","synthetic":true,"types":[]},{"text":"impl !Send for AtkMisc","synthetic":true,"types":[]},{"text":"impl !Send for AtkNoOpObject","synthetic":true,"types":[]},{"text":"impl !Send for AtkNoOpObjectFactory","synthetic":true,"types":[]},{"text":"impl !Send for AtkObject","synthetic":true,"types":[]},{"text":"impl !Send for AtkObjectFactory","synthetic":true,"types":[]},{"text":"impl !Send for AtkPlug","synthetic":true,"types":[]},{"text":"impl !Send for AtkRegistry","synthetic":true,"types":[]},{"text":"impl !Send for AtkRelation","synthetic":true,"types":[]},{"text":"impl !Send for AtkRelationSet","synthetic":true,"types":[]},{"text":"impl !Send for AtkSocket","synthetic":true,"types":[]},{"text":"impl !Send for AtkStateSet","synthetic":true,"types":[]},{"text":"impl !Send for AtkUtil","synthetic":true,"types":[]},{"text":"impl Send for AtkAction","synthetic":true,"types":[]},{"text":"impl Send for AtkComponent","synthetic":true,"types":[]},{"text":"impl Send for AtkDocument","synthetic":true,"types":[]},{"text":"impl Send for AtkEditableText","synthetic":true,"types":[]},{"text":"impl Send for AtkHyperlinkImpl","synthetic":true,"types":[]},{"text":"impl Send for AtkHypertext","synthetic":true,"types":[]},{"text":"impl Send for AtkImage","synthetic":true,"types":[]},{"text":"impl Send for AtkImplementorIface","synthetic":true,"types":[]},{"text":"impl Send for AtkSelection","synthetic":true,"types":[]},{"text":"impl Send for AtkStreamableContent","synthetic":true,"types":[]},{"text":"impl Send for AtkTable","synthetic":true,"types":[]},{"text":"impl Send for AtkTableCell","synthetic":true,"types":[]},{"text":"impl Send for AtkText","synthetic":true,"types":[]},{"text":"impl Send for AtkValue","synthetic":true,"types":[]},{"text":"impl Send for AtkWindow","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl !Send for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for PrintFmt","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !Send for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Backtrace","synthetic":true,"types":[]},{"text":"impl Send for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Send for BacktraceSymbol","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Send for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UninitSlice","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Bytes","synthetic":false,"types":[]},{"text":"impl Send for BytesMut","synthetic":false,"types":[]}];
implementors["cairo"] = [{"text":"impl&lt;T&gt; !Send for UserDataKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl !Send for RectangleList","synthetic":true,"types":[]},{"text":"impl !Send for Context","synthetic":true,"types":[]},{"text":"impl !Send for Device","synthetic":true,"types":[]},{"text":"impl Send for Antialias","synthetic":true,"types":[]},{"text":"impl Send for FillRule","synthetic":true,"types":[]},{"text":"impl Send for LineCap","synthetic":true,"types":[]},{"text":"impl Send for LineJoin","synthetic":true,"types":[]},{"text":"impl Send for Operator","synthetic":true,"types":[]},{"text":"impl Send for PathDataType","synthetic":true,"types":[]},{"text":"impl Send for Content","synthetic":true,"types":[]},{"text":"impl Send for Extend","synthetic":true,"types":[]},{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for PatternType","synthetic":true,"types":[]},{"text":"impl Send for FontSlant","synthetic":true,"types":[]},{"text":"impl Send for FontWeight","synthetic":true,"types":[]},{"text":"impl Send for TextClusterFlags","synthetic":true,"types":[]},{"text":"impl Send for FontType","synthetic":true,"types":[]},{"text":"impl Send for SubpixelOrder","synthetic":true,"types":[]},{"text":"impl Send for HintStyle","synthetic":true,"types":[]},{"text":"impl Send for HintMetrics","synthetic":true,"types":[]},{"text":"impl Send for SurfaceType","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for RegionOverlap","synthetic":true,"types":[]},{"text":"impl Send for PdfOutline","synthetic":true,"types":[]},{"text":"impl Send for MeshCorner","synthetic":true,"types":[]},{"text":"impl Send for FtSynthesize","synthetic":true,"types":[]},{"text":"impl Send for DeviceType","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for IoError","synthetic":true,"types":[]},{"text":"impl Send for BorrowError","synthetic":true,"types":[]},{"text":"impl !Send for FontFace","synthetic":true,"types":[]},{"text":"impl !Send for FontOptions","synthetic":true,"types":[]},{"text":"impl !Send for ScaledFont","synthetic":true,"types":[]},{"text":"impl !Send for ImageSurface","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImageSurfaceData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Matrix","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl Send for PathSegment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathSegments&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Pattern","synthetic":true,"types":[]},{"text":"impl !Send for SolidPattern","synthetic":true,"types":[]},{"text":"impl !Send for Gradient","synthetic":true,"types":[]},{"text":"impl !Send for LinearGradient","synthetic":true,"types":[]},{"text":"impl !Send for RadialGradient","synthetic":true,"types":[]},{"text":"impl !Send for SurfacePattern","synthetic":true,"types":[]},{"text":"impl !Send for Mesh","synthetic":true,"types":[]},{"text":"impl !Send for RecordingSurface","synthetic":true,"types":[]},{"text":"impl Send for Rectangle","synthetic":true,"types":[]},{"text":"impl Send for RectangleInt","synthetic":true,"types":[]},{"text":"impl !Send for Region","synthetic":true,"types":[]},{"text":"impl !Send for Surface","synthetic":true,"types":[]},{"text":"impl !Send for MappedImageSurface","synthetic":true,"types":[]}];
implementors["cairo_sys"] = [{"text":"impl Send for cairo_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_surface_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_device_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_pattern_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_rectangle_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_rectangle_int_t","synthetic":true,"types":[]},{"text":"impl !Send for cairo_rectangle_list_t","synthetic":true,"types":[]},{"text":"impl !Send for cairo_path_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_path_data_header","synthetic":true,"types":[]},{"text":"impl Send for cairo_path_data","synthetic":true,"types":[]},{"text":"impl Send for cairo_glyph_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_region_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_font_face_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_scaled_font_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_font_options_t","synthetic":true,"types":[]},{"text":"impl Send for FontExtents","synthetic":true,"types":[]},{"text":"impl Send for Glyph","synthetic":true,"types":[]},{"text":"impl Send for TextCluster","synthetic":true,"types":[]},{"text":"impl Send for TextExtents","synthetic":true,"types":[]},{"text":"impl Send for Matrix","synthetic":true,"types":[]},{"text":"impl Send for cairo_user_data_key_t","synthetic":true,"types":[]},{"text":"impl Send for cairo_bool_t","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Send for FixedOffset","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NaiveDate","synthetic":true,"types":[]},{"text":"impl Send for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for IsoWeek","synthetic":true,"types":[]},{"text":"impl Send for NaiveTime","synthetic":true,"types":[]},{"text":"impl Send for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Send for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]},{"text":"impl Send for Numeric","synthetic":true,"types":[]},{"text":"impl Send for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Send for Fixed","synthetic":true,"types":[]},{"text":"impl Send for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RoundingError","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]},{"text":"impl Send for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Send for Month","synthetic":true,"types":[]},{"text":"impl Send for ParseMonthError","synthetic":true,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["copyless"] = [{"text":"impl&lt;T&gt; !Send for BoxAllocation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VecAllocation&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VecEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl Send for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TrySelectError","synthetic":true,"types":[]},{"text":"impl Send for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryReadyError","synthetic":true,"types":[]},{"text":"impl Send for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Send for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["encoding_rs"] = [{"text":"impl Send for Latin1Bidi","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for CoderResult","synthetic":true,"types":[]},{"text":"impl Send for DecoderResult","synthetic":true,"types":[]},{"text":"impl Send for Decoder","synthetic":true,"types":[]},{"text":"impl Send for EncoderResult","synthetic":true,"types":[]},{"text":"impl Send for Encoder","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl Send for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SyncFailure&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Send for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Cancellation&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl !Send for LocalPool","synthetic":true,"types":[]},{"text":"impl !Send for LocalSpawner","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Enter","synthetic":true,"types":[]},{"text":"impl Send for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Send for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RemoteHandle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for WeakShared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Send for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Send for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Send for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Send for AbortHandle","synthetic":true,"types":[]},{"text":"impl Send for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, FromA, FromB&gt; Send for Unzip&lt;St, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Send for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Send for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Send for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for BufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Buffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as Stream&gt;::Item as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Send for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Send for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Send for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Send for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBuffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Send for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for SelectAll&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Send for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Feed&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Send for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Send for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Send for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R&gt; Send for Unfold&lt;T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Send for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Send for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Send for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Send for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Send for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Send for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut:&nbsp;Send&gt; Send for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for MutexLockFuture&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send, U:&nbsp;?Sized + Send&gt; Send for MappedMutexGuard&lt;'_, T, U&gt;","synthetic":false,"types":[]}];
implementors["fxhash"] = [{"text":"impl Send for FxHasher","synthetic":true,"types":[]},{"text":"impl Send for FxHasher64","synthetic":true,"types":[]},{"text":"impl Send for FxHasher32","synthetic":true,"types":[]}];
implementors["gdk"] = [{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl !Send for AppLaunchContext","synthetic":true,"types":[]},{"text":"impl !Send for Cursor","synthetic":true,"types":[]},{"text":"impl !Send for Device","synthetic":true,"types":[]},{"text":"impl !Send for DeviceManager","synthetic":true,"types":[]},{"text":"impl !Send for Display","synthetic":true,"types":[]},{"text":"impl !Send for DisplayManager","synthetic":true,"types":[]},{"text":"impl !Send for DragContext","synthetic":true,"types":[]},{"text":"impl !Send for FrameClock","synthetic":true,"types":[]},{"text":"impl !Send for Keymap","synthetic":true,"types":[]},{"text":"impl !Send for Screen","synthetic":true,"types":[]},{"text":"impl !Send for Visual","synthetic":true,"types":[]},{"text":"impl !Send for Window","synthetic":true,"types":[]},{"text":"impl !Send for EventSequence","synthetic":true,"types":[]},{"text":"impl !Send for FrameTimings","synthetic":true,"types":[]},{"text":"impl Send for AxisUse","synthetic":true,"types":[]},{"text":"impl Send for ByteOrder","synthetic":true,"types":[]},{"text":"impl Send for CrossingMode","synthetic":true,"types":[]},{"text":"impl Send for CursorType","synthetic":true,"types":[]},{"text":"impl Send for DeviceType","synthetic":true,"types":[]},{"text":"impl Send for DragProtocol","synthetic":true,"types":[]},{"text":"impl Send for EventType","synthetic":true,"types":[]},{"text":"impl Send for FullscreenMode","synthetic":true,"types":[]},{"text":"impl Send for GrabOwnership","synthetic":true,"types":[]},{"text":"impl Send for GrabStatus","synthetic":true,"types":[]},{"text":"impl Send for Gravity","synthetic":true,"types":[]},{"text":"impl Send for InputMode","synthetic":true,"types":[]},{"text":"impl Send for InputSource","synthetic":true,"types":[]},{"text":"impl Send for ModifierIntent","synthetic":true,"types":[]},{"text":"impl Send for NotifyType","synthetic":true,"types":[]},{"text":"impl Send for OwnerChange","synthetic":true,"types":[]},{"text":"impl Send for PropMode","synthetic":true,"types":[]},{"text":"impl Send for PropertyState","synthetic":true,"types":[]},{"text":"impl Send for ScrollDirection","synthetic":true,"types":[]},{"text":"impl Send for SettingAction","synthetic":true,"types":[]},{"text":"impl Send for VisibilityState","synthetic":true,"types":[]},{"text":"impl Send for VisualType","synthetic":true,"types":[]},{"text":"impl Send for WindowEdge","synthetic":true,"types":[]},{"text":"impl Send for WindowType","synthetic":true,"types":[]},{"text":"impl Send for WindowTypeHint","synthetic":true,"types":[]},{"text":"impl Send for WindowWindowClass","synthetic":true,"types":[]},{"text":"impl Send for DragAction","synthetic":true,"types":[]},{"text":"impl Send for EventMask","synthetic":true,"types":[]},{"text":"impl Send for FrameClockPhase","synthetic":true,"types":[]},{"text":"impl Send for ModifierType","synthetic":true,"types":[]},{"text":"impl Send for WMDecoration","synthetic":true,"types":[]},{"text":"impl Send for WMFunction","synthetic":true,"types":[]},{"text":"impl Send for WindowHints","synthetic":true,"types":[]},{"text":"impl Send for WindowState","synthetic":true,"types":[]},{"text":"impl !Send for Atom","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ChangeData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for EventButton","synthetic":true,"types":[]},{"text":"impl !Send for EventConfigure","synthetic":true,"types":[]},{"text":"impl !Send for EventCrossing","synthetic":true,"types":[]},{"text":"impl !Send for EventDND","synthetic":true,"types":[]},{"text":"impl !Send for EventExpose","synthetic":true,"types":[]},{"text":"impl !Send for EventFocus","synthetic":true,"types":[]},{"text":"impl !Send for EventGrabBroken","synthetic":true,"types":[]},{"text":"impl !Send for EventKey","synthetic":true,"types":[]},{"text":"impl !Send for EventMotion","synthetic":true,"types":[]},{"text":"impl !Send for EventOwnerChange","synthetic":true,"types":[]},{"text":"impl !Send for EventProperty","synthetic":true,"types":[]},{"text":"impl !Send for EventProximity","synthetic":true,"types":[]},{"text":"impl !Send for EventScroll","synthetic":true,"types":[]},{"text":"impl !Send for EventSelection","synthetic":true,"types":[]},{"text":"impl !Send for EventSetting","synthetic":true,"types":[]},{"text":"impl !Send for EventTouch","synthetic":true,"types":[]},{"text":"impl !Send for EventVisibility","synthetic":true,"types":[]},{"text":"impl !Send for EventWindowState","synthetic":true,"types":[]},{"text":"impl Send for GRange","synthetic":true,"types":[]},{"text":"impl Send for Geometry","synthetic":true,"types":[]},{"text":"impl Send for KeymapKey","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Rectangle","synthetic":true,"types":[]},{"text":"impl Send for RgbaParseError","synthetic":true,"types":[]},{"text":"impl Send for RGBA","synthetic":true,"types":[]},{"text":"impl Send for TimeCoord","synthetic":true,"types":[]},{"text":"impl !Send for WindowAttr","synthetic":true,"types":[]},{"text":"impl Send for AppLaunchContextClass","synthetic":false,"types":[]},{"text":"impl Send for CursorClass","synthetic":false,"types":[]},{"text":"impl Send for DeviceClass","synthetic":false,"types":[]},{"text":"impl Send for DeviceManagerClass","synthetic":false,"types":[]},{"text":"impl Send for DisplayClass","synthetic":false,"types":[]},{"text":"impl Send for DisplayManagerClass","synthetic":false,"types":[]},{"text":"impl Send for DragContextClass","synthetic":false,"types":[]},{"text":"impl Send for FrameClockClass","synthetic":false,"types":[]},{"text":"impl Send for KeymapClass","synthetic":false,"types":[]},{"text":"impl Send for ScreenClass","synthetic":false,"types":[]},{"text":"impl Send for VisualClass","synthetic":false,"types":[]},{"text":"impl Send for WindowClass","synthetic":false,"types":[]}];
implementors["gdk_pixbuf"] = [{"text":"impl !Send for Pixbuf","synthetic":true,"types":[]},{"text":"impl !Send for PixbufLoader","synthetic":true,"types":[]},{"text":"impl !Send for PixbufSimpleAnim","synthetic":true,"types":[]},{"text":"impl !Send for PixbufFormat","synthetic":true,"types":[]},{"text":"impl Send for Colorspace","synthetic":true,"types":[]},{"text":"impl Send for InterpType","synthetic":true,"types":[]},{"text":"impl Send for PixbufAlphaMode","synthetic":true,"types":[]},{"text":"impl Send for PixbufError","synthetic":true,"types":[]},{"text":"impl Send for PixbufRotation","synthetic":true,"types":[]},{"text":"impl !Send for PixbufAnimationIter","synthetic":true,"types":[]},{"text":"impl !Send for PixbufAnimation","synthetic":true,"types":[]},{"text":"impl Send for PixbufClass","synthetic":false,"types":[]},{"text":"impl Send for PixbufLoaderClass","synthetic":false,"types":[]},{"text":"impl Send for PixbufSimpleAnimClass","synthetic":false,"types":[]}];
implementors["gdk_pixbuf_sys"] = [{"text":"impl Send for GdkPixbufFormat","synthetic":true,"types":[]},{"text":"impl !Send for GdkPixbufLoaderClass","synthetic":true,"types":[]},{"text":"impl Send for _GdkPixbufSimpleAnimClass","synthetic":true,"types":[]},{"text":"impl Send for GdkPixbuf","synthetic":true,"types":[]},{"text":"impl Send for GdkPixbufAnimation","synthetic":true,"types":[]},{"text":"impl Send for GdkPixbufAnimationIter","synthetic":true,"types":[]},{"text":"impl !Send for GdkPixbufLoader","synthetic":true,"types":[]},{"text":"impl Send for GdkPixbufSimpleAnim","synthetic":true,"types":[]},{"text":"impl Send for GdkPixbufSimpleAnimIter","synthetic":true,"types":[]}];
implementors["gdk_sys"] = [{"text":"impl !Send for GdkEvent","synthetic":true,"types":[]},{"text":"impl Send for _GdkAtom","synthetic":true,"types":[]},{"text":"impl Send for GdkColor","synthetic":true,"types":[]},{"text":"impl Send for _GdkDevicePadInterface","synthetic":true,"types":[]},{"text":"impl Send for _GdkDrawingContextClass","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventAny","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventButton","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventConfigure","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventCrossing","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventDND","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventExpose","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventFocus","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventGrabBroken","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventKey","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventMotion","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventOwnerChange","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventPadAxis","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventPadButton","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventPadGroupMode","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventProperty","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventProximity","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventScroll","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventSelection","synthetic":true,"types":[]},{"text":"impl Send for GdkEventSequence","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventSetting","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventTouch","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventTouchpadPinch","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventTouchpadSwipe","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventVisibility","synthetic":true,"types":[]},{"text":"impl !Send for GdkEventWindowState","synthetic":true,"types":[]},{"text":"impl Send for _GdkFrameClockClass","synthetic":true,"types":[]},{"text":"impl Send for _GdkFrameClockPrivate","synthetic":true,"types":[]},{"text":"impl Send for GdkFrameTimings","synthetic":true,"types":[]},{"text":"impl Send for GdkGeometry","synthetic":true,"types":[]},{"text":"impl Send for GdkKeymapKey","synthetic":true,"types":[]},{"text":"impl Send for _GdkMonitorClass","synthetic":true,"types":[]},{"text":"impl Send for GdkPoint","synthetic":true,"types":[]},{"text":"impl Send for GdkRGBA","synthetic":true,"types":[]},{"text":"impl Send for GdkRectangle","synthetic":true,"types":[]},{"text":"impl Send for GdkTimeCoord","synthetic":true,"types":[]},{"text":"impl !Send for GdkWindowAttr","synthetic":true,"types":[]},{"text":"impl !Send for GdkWindowClass","synthetic":true,"types":[]},{"text":"impl Send for _GdkWindowRedirect","synthetic":true,"types":[]},{"text":"impl Send for GdkAppLaunchContext","synthetic":true,"types":[]},{"text":"impl Send for GdkCursor","synthetic":true,"types":[]},{"text":"impl Send for GdkDevice","synthetic":true,"types":[]},{"text":"impl Send for GdkDeviceManager","synthetic":true,"types":[]},{"text":"impl Send for GdkDeviceTool","synthetic":true,"types":[]},{"text":"impl Send for GdkDisplay","synthetic":true,"types":[]},{"text":"impl Send for GdkDisplayManager","synthetic":true,"types":[]},{"text":"impl Send for GdkDragContext","synthetic":true,"types":[]},{"text":"impl Send for GdkDrawingContext","synthetic":true,"types":[]},{"text":"impl Send for GdkFrameClock","synthetic":true,"types":[]},{"text":"impl Send for GdkGLContext","synthetic":true,"types":[]},{"text":"impl Send for GdkKeymap","synthetic":true,"types":[]},{"text":"impl Send for GdkMonitor","synthetic":true,"types":[]},{"text":"impl Send for GdkScreen","synthetic":true,"types":[]},{"text":"impl !Send for GdkSeat","synthetic":true,"types":[]},{"text":"impl Send for GdkVisual","synthetic":true,"types":[]},{"text":"impl Send for GdkWindow","synthetic":true,"types":[]},{"text":"impl Send for GdkDevicePad","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["gimli"] = [{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for LineEncoding","synthetic":true,"types":[]},{"text":"impl Send for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAbbrevOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAddrBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAddrIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugInfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLineOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLineStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocationListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLocListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLocListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugMacinfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugMacroOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RangeListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugRngListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugRngListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffsetsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffsetsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugTypesOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DebugTypeSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EhFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnitSectionOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SectionId","synthetic":true,"types":[]},{"text":"impl Send for DwoId","synthetic":true,"types":[]},{"text":"impl Send for DwarfFileType","synthetic":true,"types":[]},{"text":"impl Send for Arm","synthetic":true,"types":[]},{"text":"impl Send for X86","synthetic":true,"types":[]},{"text":"impl Send for X86_64","synthetic":true,"types":[]},{"text":"impl Send for DwUt","synthetic":true,"types":[]},{"text":"impl Send for DwCfa","synthetic":true,"types":[]},{"text":"impl Send for DwChildren","synthetic":true,"types":[]},{"text":"impl Send for DwTag","synthetic":true,"types":[]},{"text":"impl Send for DwAt","synthetic":true,"types":[]},{"text":"impl Send for DwForm","synthetic":true,"types":[]},{"text":"impl Send for DwAte","synthetic":true,"types":[]},{"text":"impl Send for DwLle","synthetic":true,"types":[]},{"text":"impl Send for DwDs","synthetic":true,"types":[]},{"text":"impl Send for DwEnd","synthetic":true,"types":[]},{"text":"impl Send for DwAccess","synthetic":true,"types":[]},{"text":"impl Send for DwVis","synthetic":true,"types":[]},{"text":"impl Send for DwVirtuality","synthetic":true,"types":[]},{"text":"impl Send for DwLang","synthetic":true,"types":[]},{"text":"impl Send for DwAddr","synthetic":true,"types":[]},{"text":"impl Send for DwId","synthetic":true,"types":[]},{"text":"impl Send for DwCc","synthetic":true,"types":[]},{"text":"impl Send for DwInl","synthetic":true,"types":[]},{"text":"impl Send for DwOrd","synthetic":true,"types":[]},{"text":"impl Send for DwDsc","synthetic":true,"types":[]},{"text":"impl Send for DwIdx","synthetic":true,"types":[]},{"text":"impl Send for DwDefaulted","synthetic":true,"types":[]},{"text":"impl Send for DwLns","synthetic":true,"types":[]},{"text":"impl Send for DwLne","synthetic":true,"types":[]},{"text":"impl Send for DwLnct","synthetic":true,"types":[]},{"text":"impl Send for DwMacro","synthetic":true,"types":[]},{"text":"impl Send for DwRle","synthetic":true,"types":[]},{"text":"impl Send for DwOp","synthetic":true,"types":[]},{"text":"impl Send for DwEhPe","synthetic":true,"types":[]},{"text":"impl Send for RunTimeEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]},{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAddr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ParsedEhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for EhHdrTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EhFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BaseAddresses","synthetic":true,"types":[]},{"text":"impl Send for SectionBaseAddresses","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Augmentation","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UninitializedUnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for UnwindTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'iter, R&gt; Send for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UnwindTableRow&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CfaRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RegisterRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CallFrameInstruction&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for CallFrameInstructionIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pointer","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Dwarf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Unit&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RangeIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'input, Endian&gt; Send for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReaderOffsetId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAbbrev&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Abbreviations","synthetic":true,"types":[]},{"text":"impl Send for Abbreviation","synthetic":true,"types":[]},{"text":"impl Send for AttributeSpecification","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ArangeEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAranges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ArangeEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLine&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Program, Offset&gt; Send for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LineInstructions&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LineRow","synthetic":true,"types":[]},{"text":"impl Send for ColumnType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LineSequence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FileEntryFormat","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLoc&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLocLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocationLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawLocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocationListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DieReference&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EvaluationResult&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Expression&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for OperationIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Evaluation&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugPubNames&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubNamesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugPubTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubTypesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugRanges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugRngLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RangeLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawRngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RawRngListEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugStrOffsets&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLineStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnitOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugInfoUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Offset&gt; Send for UnitType&lt;Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R, Offset&gt; Send for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Attribute&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R&gt; !Send for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesCursor&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesTree&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Send for EntriesTreeNode&lt;'abbrev, 'unit, 'tree, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Send for EntriesTreeIter&lt;'abbrev, 'unit, 'tree, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugTypesUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["gio"] = [{"text":"impl Send for OwnerId","synthetic":true,"types":[]},{"text":"impl Send for RegistrationId","synthetic":true,"types":[]},{"text":"impl Send for WatcherId","synthetic":true,"types":[]},{"text":"impl Send for ActionGroupExportId","synthetic":true,"types":[]},{"text":"impl Send for MenuModelExportId","synthetic":true,"types":[]},{"text":"impl Send for FilterId","synthetic":true,"types":[]},{"text":"impl Send for SignalSubscriptionId","synthetic":true,"types":[]},{"text":"impl !Send for FileAttributematcherIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InetAddressBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IOStreamAsyncReadWrite&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InputStreamRead&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for InputStreamAsyncBufRead&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OutputStreamWrite&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InputStreamAsyncRead&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OutputStreamAsyncWrite&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnixSocketAddressPath&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Action","synthetic":true,"types":[]},{"text":"impl !Send for ActionGroup","synthetic":true,"types":[]},{"text":"impl !Send for ActionMap","synthetic":true,"types":[]},{"text":"impl !Send for AppInfo","synthetic":true,"types":[]},{"text":"impl !Send for AppInfoMonitor","synthetic":true,"types":[]},{"text":"impl !Send for AppLaunchContext","synthetic":true,"types":[]},{"text":"impl !Send for Application","synthetic":true,"types":[]},{"text":"impl !Send for ApplicationBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ApplicationCommandLine","synthetic":true,"types":[]},{"text":"impl !Send for BufferedInputStream","synthetic":true,"types":[]},{"text":"impl !Send for BufferedInputStreamBuilder","synthetic":true,"types":[]},{"text":"impl !Send for BufferedOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for BufferedOutputStreamBuilder","synthetic":true,"types":[]},{"text":"impl !Send for BytesIcon","synthetic":true,"types":[]},{"text":"impl !Send for CharsetConverter","synthetic":true,"types":[]},{"text":"impl Send for CharsetConverterBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Converter","synthetic":true,"types":[]},{"text":"impl !Send for ConverterInputStream","synthetic":true,"types":[]},{"text":"impl !Send for ConverterInputStreamBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ConverterOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for ConverterOutputStreamBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Credentials","synthetic":true,"types":[]},{"text":"impl !Send for DBusAuthObserver","synthetic":true,"types":[]},{"text":"impl !Send for DBusConnection","synthetic":true,"types":[]},{"text":"impl !Send for DBusInterface","synthetic":true,"types":[]},{"text":"impl !Send for DBusInterfaceSkeleton","synthetic":true,"types":[]},{"text":"impl !Send for DBusMenuModel","synthetic":true,"types":[]},{"text":"impl !Send for DBusMessage","synthetic":true,"types":[]},{"text":"impl !Send for DBusMethodInvocation","synthetic":true,"types":[]},{"text":"impl !Send for DBusObject","synthetic":true,"types":[]},{"text":"impl !Send for DBusProxy","synthetic":true,"types":[]},{"text":"impl !Send for DBusServer","synthetic":true,"types":[]},{"text":"impl !Send for DataInputStream","synthetic":true,"types":[]},{"text":"impl !Send for DataInputStreamBuilder","synthetic":true,"types":[]},{"text":"impl !Send for DataOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for DataOutputStreamBuilder","synthetic":true,"types":[]},{"text":"impl !Send for DesktopAppInfo","synthetic":true,"types":[]},{"text":"impl !Send for Drive","synthetic":true,"types":[]},{"text":"impl !Send for Emblem","synthetic":true,"types":[]},{"text":"impl !Send for EmblemedIcon","synthetic":true,"types":[]},{"text":"impl !Send for FileEnumerator","synthetic":true,"types":[]},{"text":"impl !Send for FileIOStream","synthetic":true,"types":[]},{"text":"impl !Send for FileIcon","synthetic":true,"types":[]},{"text":"impl !Send for FileInfo","synthetic":true,"types":[]},{"text":"impl !Send for FileInputStream","synthetic":true,"types":[]},{"text":"impl !Send for FileMonitor","synthetic":true,"types":[]},{"text":"impl !Send for FileOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for FilenameCompleter","synthetic":true,"types":[]},{"text":"impl !Send for FilterInputStream","synthetic":true,"types":[]},{"text":"impl !Send for FilterOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for IOStream","synthetic":true,"types":[]},{"text":"impl !Send for Icon","synthetic":true,"types":[]},{"text":"impl !Send for InputStream","synthetic":true,"types":[]},{"text":"impl !Send for LoadableIcon","synthetic":true,"types":[]},{"text":"impl !Send for MemoryInputStream","synthetic":true,"types":[]},{"text":"impl !Send for MemoryOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for Menu","synthetic":true,"types":[]},{"text":"impl !Send for MenuAttributeIter","synthetic":true,"types":[]},{"text":"impl !Send for MenuItem","synthetic":true,"types":[]},{"text":"impl !Send for MenuLinkIter","synthetic":true,"types":[]},{"text":"impl !Send for MenuModel","synthetic":true,"types":[]},{"text":"impl !Send for Mount","synthetic":true,"types":[]},{"text":"impl !Send for MountOperation","synthetic":true,"types":[]},{"text":"impl !Send for NetworkMonitor","synthetic":true,"types":[]},{"text":"impl !Send for NetworkService","synthetic":true,"types":[]},{"text":"impl !Send for Notification","synthetic":true,"types":[]},{"text":"impl !Send for OutputStream","synthetic":true,"types":[]},{"text":"impl !Send for Permission","synthetic":true,"types":[]},{"text":"impl !Send for PollableInputStream","synthetic":true,"types":[]},{"text":"impl !Send for PollableOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for PropertyAction","synthetic":true,"types":[]},{"text":"impl !Send for Proxy","synthetic":true,"types":[]},{"text":"impl !Send for ProxyResolver","synthetic":true,"types":[]},{"text":"impl !Send for RemoteActionGroup","synthetic":true,"types":[]},{"text":"impl !Send for Resolver","synthetic":true,"types":[]},{"text":"impl !Send for Seekable","synthetic":true,"types":[]},{"text":"impl !Send for Settings","synthetic":true,"types":[]},{"text":"impl !Send for SettingsBackend","synthetic":true,"types":[]},{"text":"impl !Send for SimpleAction","synthetic":true,"types":[]},{"text":"impl !Send for SimpleActionGroup","synthetic":true,"types":[]},{"text":"impl !Send for SimplePermission","synthetic":true,"types":[]},{"text":"impl !Send for Socket","synthetic":true,"types":[]},{"text":"impl !Send for SocketAddressEnumerator","synthetic":true,"types":[]},{"text":"impl !Send for SocketClient","synthetic":true,"types":[]},{"text":"impl !Send for SocketConnectable","synthetic":true,"types":[]},{"text":"impl !Send for SocketConnection","synthetic":true,"types":[]},{"text":"impl !Send for SocketListener","synthetic":true,"types":[]},{"text":"impl !Send for SocketService","synthetic":true,"types":[]},{"text":"impl !Send for Subprocess","synthetic":true,"types":[]},{"text":"impl !Send for SubprocessLauncher","synthetic":true,"types":[]},{"text":"impl !Send for TcpConnection","synthetic":true,"types":[]},{"text":"impl !Send for ThemedIcon","synthetic":true,"types":[]},{"text":"impl !Send for ThreadedSocketService","synthetic":true,"types":[]},{"text":"impl !Send for TlsCertificate","synthetic":true,"types":[]},{"text":"impl !Send for TlsClientConnection","synthetic":true,"types":[]},{"text":"impl !Send for TlsConnection","synthetic":true,"types":[]},{"text":"impl !Send for TlsDatabase","synthetic":true,"types":[]},{"text":"impl !Send for TlsFileDatabase","synthetic":true,"types":[]},{"text":"impl !Send for TlsInteraction","synthetic":true,"types":[]},{"text":"impl !Send for TlsPassword","synthetic":true,"types":[]},{"text":"impl !Send for TlsServerConnection","synthetic":true,"types":[]},{"text":"impl !Send for UnixFDList","synthetic":true,"types":[]},{"text":"impl !Send for UnixInputStream","synthetic":true,"types":[]},{"text":"impl !Send for UnixOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for Volume","synthetic":true,"types":[]},{"text":"impl !Send for VolumeMonitor","synthetic":true,"types":[]},{"text":"impl !Send for ZlibCompressor","synthetic":true,"types":[]},{"text":"impl !Send for ZlibDecompressor","synthetic":true,"types":[]},{"text":"impl !Send for DBusArgInfo","synthetic":true,"types":[]},{"text":"impl !Send for DBusInterfaceInfo","synthetic":true,"types":[]},{"text":"impl !Send for DBusMethodInfo","synthetic":true,"types":[]},{"text":"impl !Send for DBusNodeInfo","synthetic":true,"types":[]},{"text":"impl !Send for DBusPropertyInfo","synthetic":true,"types":[]},{"text":"impl !Send for DBusSignalInfo","synthetic":true,"types":[]},{"text":"impl !Send for FileAttributeMatcher","synthetic":true,"types":[]},{"text":"impl !Send for Resource","synthetic":true,"types":[]},{"text":"impl !Send for SettingsSchema","synthetic":true,"types":[]},{"text":"impl !Send for SettingsSchemaKey","synthetic":true,"types":[]},{"text":"impl !Send for SettingsSchemaSource","synthetic":true,"types":[]},{"text":"impl !Send for SrvTarget","synthetic":true,"types":[]},{"text":"impl Send for BusType","synthetic":true,"types":[]},{"text":"impl Send for ConverterResult","synthetic":true,"types":[]},{"text":"impl Send for CredentialsType","synthetic":true,"types":[]},{"text":"impl Send for DBusMessageByteOrder","synthetic":true,"types":[]},{"text":"impl Send for DBusMessageHeaderField","synthetic":true,"types":[]},{"text":"impl Send for DBusMessageType","synthetic":true,"types":[]},{"text":"impl Send for DataStreamByteOrder","synthetic":true,"types":[]},{"text":"impl Send for DataStreamNewlineType","synthetic":true,"types":[]},{"text":"impl Send for DriveStartStopType","synthetic":true,"types":[]},{"text":"impl Send for EmblemOrigin","synthetic":true,"types":[]},{"text":"impl Send for FileAttributeStatus","synthetic":true,"types":[]},{"text":"impl Send for FileAttributeType","synthetic":true,"types":[]},{"text":"impl Send for FileMonitorEvent","synthetic":true,"types":[]},{"text":"impl Send for FileType","synthetic":true,"types":[]},{"text":"impl Send for IOErrorEnum","synthetic":true,"types":[]},{"text":"impl Send for MountOperationResult","synthetic":true,"types":[]},{"text":"impl Send for NotificationPriority","synthetic":true,"types":[]},{"text":"impl Send for PasswordSave","synthetic":true,"types":[]},{"text":"impl Send for ResolverRecordType","synthetic":true,"types":[]},{"text":"impl Send for ResourceError","synthetic":true,"types":[]},{"text":"impl Send for SocketClientEvent","synthetic":true,"types":[]},{"text":"impl Send for SocketFamily","synthetic":true,"types":[]},{"text":"impl Send for SocketProtocol","synthetic":true,"types":[]},{"text":"impl Send for SocketType","synthetic":true,"types":[]},{"text":"impl Send for TlsAuthenticationMode","synthetic":true,"types":[]},{"text":"impl Send for TlsCertificateRequestFlags","synthetic":true,"types":[]},{"text":"impl Send for TlsDatabaseLookupFlags","synthetic":true,"types":[]},{"text":"impl Send for TlsInteractionResult","synthetic":true,"types":[]},{"text":"impl Send for TlsRehandshakeMode","synthetic":true,"types":[]},{"text":"impl Send for UnixSocketAddressType","synthetic":true,"types":[]},{"text":"impl Send for ZlibCompressorFormat","synthetic":true,"types":[]},{"text":"impl Send for AppInfoCreateFlags","synthetic":true,"types":[]},{"text":"impl Send for ApplicationFlags","synthetic":true,"types":[]},{"text":"impl Send for AskPasswordFlags","synthetic":true,"types":[]},{"text":"impl Send for BusNameOwnerFlags","synthetic":true,"types":[]},{"text":"impl Send for BusNameWatcherFlags","synthetic":true,"types":[]},{"text":"impl Send for ConverterFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusCallFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusCapabilityFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusConnectionFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusInterfaceSkeletonFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusMessageFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusProxyFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusSendMessageFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusServerFlags","synthetic":true,"types":[]},{"text":"impl Send for DBusSignalFlags","synthetic":true,"types":[]},{"text":"impl Send for DriveStartFlags","synthetic":true,"types":[]},{"text":"impl Send for FileCopyFlags","synthetic":true,"types":[]},{"text":"impl Send for FileCreateFlags","synthetic":true,"types":[]},{"text":"impl Send for FileMeasureFlags","synthetic":true,"types":[]},{"text":"impl Send for FileMonitorFlags","synthetic":true,"types":[]},{"text":"impl Send for FileQueryInfoFlags","synthetic":true,"types":[]},{"text":"impl Send for IOStreamSpliceFlags","synthetic":true,"types":[]},{"text":"impl Send for MountMountFlags","synthetic":true,"types":[]},{"text":"impl Send for MountUnmountFlags","synthetic":true,"types":[]},{"text":"impl Send for OutputStreamSpliceFlags","synthetic":true,"types":[]},{"text":"impl Send for ResourceLookupFlags","synthetic":true,"types":[]},{"text":"impl Send for SettingsBindFlags","synthetic":true,"types":[]},{"text":"impl Send for SubprocessFlags","synthetic":true,"types":[]},{"text":"impl Send for TlsCertificateFlags","synthetic":true,"types":[]},{"text":"impl Send for TlsDatabaseVerifyFlags","synthetic":true,"types":[]},{"text":"impl Send for TlsPasswordFlags","synthetic":true,"types":[]},{"text":"impl&lt;F, O, T, E&gt; Send for GioFuture&lt;F, O, T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for ArgumentList","synthetic":true,"types":[]},{"text":"impl !Send for ReadInputStream","synthetic":true,"types":[]},{"text":"impl !Send for WriteOutputStream","synthetic":true,"types":[]},{"text":"impl Send for AppInfoMonitorClass","synthetic":false,"types":[]},{"text":"impl Send for AppLaunchContextClass","synthetic":false,"types":[]},{"text":"impl Send for ApplicationClass","synthetic":false,"types":[]},{"text":"impl Send for ApplicationCommandLineClass","synthetic":false,"types":[]},{"text":"impl Send for BufferedInputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for BufferedOutputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for BytesIconClass","synthetic":false,"types":[]},{"text":"impl Send for CancellableClass","synthetic":false,"types":[]},{"text":"impl Send for Cancellable","synthetic":false,"types":[]},{"text":"impl Send for CharsetConverterClass","synthetic":false,"types":[]},{"text":"impl Send for ConverterInputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for ConverterOutputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for CredentialsClass","synthetic":false,"types":[]},{"text":"impl Send for DBusAuthObserverClass","synthetic":false,"types":[]},{"text":"impl Send for DBusConnectionClass","synthetic":false,"types":[]},{"text":"impl Send for DBusInterfaceSkeletonClass","synthetic":false,"types":[]},{"text":"impl Send for DBusMenuModelClass","synthetic":false,"types":[]},{"text":"impl Send for DBusMessageClass","synthetic":false,"types":[]},{"text":"impl Send for DBusMethodInvocationClass","synthetic":false,"types":[]},{"text":"impl Send for DBusProxyClass","synthetic":false,"types":[]},{"text":"impl Send for DBusServerClass","synthetic":false,"types":[]},{"text":"impl Send for DataInputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for DataOutputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for DesktopAppInfoClass","synthetic":false,"types":[]},{"text":"impl Send for EmblemClass","synthetic":false,"types":[]},{"text":"impl Send for EmblemedIconClass","synthetic":false,"types":[]},{"text":"impl Send for File","synthetic":false,"types":[]},{"text":"impl Send for FileEnumeratorClass","synthetic":false,"types":[]},{"text":"impl Send for FileIOStreamClass","synthetic":false,"types":[]},{"text":"impl Send for FileIconClass","synthetic":false,"types":[]},{"text":"impl Send for FileInfoClass","synthetic":false,"types":[]},{"text":"impl Send for FileInputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for FileMonitorClass","synthetic":false,"types":[]},{"text":"impl Send for FileOutputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for FilenameCompleterClass","synthetic":false,"types":[]},{"text":"impl Send for FilterInputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for FilterOutputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for IOStreamClass","synthetic":false,"types":[]},{"text":"impl Send for InetAddressClass","synthetic":false,"types":[]},{"text":"impl Send for InetAddress","synthetic":false,"types":[]},{"text":"impl Send for InetAddressMaskClass","synthetic":false,"types":[]},{"text":"impl Send for InetAddressMask","synthetic":false,"types":[]},{"text":"impl Send for InetSocketAddressClass","synthetic":false,"types":[]},{"text":"impl Send for InetSocketAddress","synthetic":false,"types":[]},{"text":"impl Send for InputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for MemoryInputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for MemoryOutputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for MenuClass","synthetic":false,"types":[]},{"text":"impl Send for MenuAttributeIterClass","synthetic":false,"types":[]},{"text":"impl Send for MenuItemClass","synthetic":false,"types":[]},{"text":"impl Send for MenuLinkIterClass","synthetic":false,"types":[]},{"text":"impl Send for MenuModelClass","synthetic":false,"types":[]},{"text":"impl Send for MountOperationClass","synthetic":false,"types":[]},{"text":"impl Send for NetworkAddressClass","synthetic":false,"types":[]},{"text":"impl Send for NetworkAddress","synthetic":false,"types":[]},{"text":"impl Send for NetworkServiceClass","synthetic":false,"types":[]},{"text":"impl Send for NotificationClass","synthetic":false,"types":[]},{"text":"impl Send for OutputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for PermissionClass","synthetic":false,"types":[]},{"text":"impl Send for PropertyActionClass","synthetic":false,"types":[]},{"text":"impl Send for ProxyAddressClass","synthetic":false,"types":[]},{"text":"impl Send for ProxyAddress","synthetic":false,"types":[]},{"text":"impl Send for ResolverClass","synthetic":false,"types":[]},{"text":"impl Send for SettingsClass","synthetic":false,"types":[]},{"text":"impl Send for SettingsBackendClass","synthetic":false,"types":[]},{"text":"impl Send for SimpleActionClass","synthetic":false,"types":[]},{"text":"impl Send for SimpleActionGroupClass","synthetic":false,"types":[]},{"text":"impl Send for SimplePermissionClass","synthetic":false,"types":[]},{"text":"impl Send for SocketClass","synthetic":false,"types":[]},{"text":"impl Send for SocketAddressClass","synthetic":false,"types":[]},{"text":"impl Send for SocketAddress","synthetic":false,"types":[]},{"text":"impl Send for SocketAddressEnumeratorClass","synthetic":false,"types":[]},{"text":"impl Send for SocketClientClass","synthetic":false,"types":[]},{"text":"impl Send for SocketConnectionClass","synthetic":false,"types":[]},{"text":"impl Send for SocketListenerClass","synthetic":false,"types":[]},{"text":"impl Send for SocketServiceClass","synthetic":false,"types":[]},{"text":"impl Send for SubprocessClass","synthetic":false,"types":[]},{"text":"impl Send for SubprocessLauncherClass","synthetic":false,"types":[]},{"text":"impl Send for TcpConnectionClass","synthetic":false,"types":[]},{"text":"impl Send for ThemedIconClass","synthetic":false,"types":[]},{"text":"impl Send for ThreadedSocketServiceClass","synthetic":false,"types":[]},{"text":"impl Send for TlsCertificateClass","synthetic":false,"types":[]},{"text":"impl Send for TlsConnectionClass","synthetic":false,"types":[]},{"text":"impl Send for TlsDatabaseClass","synthetic":false,"types":[]},{"text":"impl Send for TlsInteractionClass","synthetic":false,"types":[]},{"text":"impl Send for TlsPasswordClass","synthetic":false,"types":[]},{"text":"impl Send for UnixFDListClass","synthetic":false,"types":[]},{"text":"impl Send for UnixInputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for UnixOutputStreamClass","synthetic":false,"types":[]},{"text":"impl Send for UnixSocketAddressClass","synthetic":false,"types":[]},{"text":"impl Send for UnixSocketAddress","synthetic":false,"types":[]},{"text":"impl Send for VfsClass","synthetic":false,"types":[]},{"text":"impl Send for Vfs","synthetic":false,"types":[]},{"text":"impl Send for VolumeMonitorClass","synthetic":false,"types":[]},{"text":"impl Send for ZlibCompressorClass","synthetic":false,"types":[]},{"text":"impl Send for ZlibDecompressorClass","synthetic":false,"types":[]},{"text":"impl&lt;T, E&gt; Send for GioFutureResult&lt;T, E&gt;","synthetic":false,"types":[]}];
implementors["gio_sys"] = [{"text":"impl !Send for GActionEntry","synthetic":true,"types":[]},{"text":"impl Send for GActionGroupInterface","synthetic":true,"types":[]},{"text":"impl Send for GActionInterface","synthetic":true,"types":[]},{"text":"impl Send for GActionMapInterface","synthetic":true,"types":[]},{"text":"impl Send for GAppInfoIface","synthetic":true,"types":[]},{"text":"impl !Send for GAppLaunchContextClass","synthetic":true,"types":[]},{"text":"impl Send for _GAppLaunchContextPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GApplicationClass","synthetic":true,"types":[]},{"text":"impl !Send for GApplicationCommandLineClass","synthetic":true,"types":[]},{"text":"impl Send for _GApplicationCommandLinePrivate","synthetic":true,"types":[]},{"text":"impl Send for _GApplicationPrivate","synthetic":true,"types":[]},{"text":"impl Send for GAsyncInitableIface","synthetic":true,"types":[]},{"text":"impl Send for GAsyncResultIface","synthetic":true,"types":[]},{"text":"impl !Send for GBufferedInputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GBufferedInputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GBufferedOutputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GBufferedOutputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GCancellableClass","synthetic":true,"types":[]},{"text":"impl Send for _GCancellablePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GCharsetConverterClass","synthetic":true,"types":[]},{"text":"impl Send for GConverterIface","synthetic":true,"types":[]},{"text":"impl !Send for GConverterInputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GConverterInputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GConverterOutputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GConverterOutputStreamPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GCredentialsClass","synthetic":true,"types":[]},{"text":"impl !Send for GDBusAnnotationInfo","synthetic":true,"types":[]},{"text":"impl !Send for GDBusArgInfo","synthetic":true,"types":[]},{"text":"impl !Send for GDBusErrorEntry","synthetic":true,"types":[]},{"text":"impl Send for GDBusInterfaceIface","synthetic":true,"types":[]},{"text":"impl !Send for GDBusInterfaceInfo","synthetic":true,"types":[]},{"text":"impl !Send for GDBusInterfaceSkeletonClass","synthetic":true,"types":[]},{"text":"impl Send for _GDBusInterfaceSkeletonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GDBusInterfaceVTable","synthetic":true,"types":[]},{"text":"impl !Send for GDBusMethodInfo","synthetic":true,"types":[]},{"text":"impl !Send for GDBusNodeInfo","synthetic":true,"types":[]},{"text":"impl Send for GDBusObjectIface","synthetic":true,"types":[]},{"text":"impl !Send for GDBusObjectManagerClientClass","synthetic":true,"types":[]},{"text":"impl Send for _GDBusObjectManagerClientPrivate","synthetic":true,"types":[]},{"text":"impl Send for GDBusObjectManagerIface","synthetic":true,"types":[]},{"text":"impl !Send for GDBusObjectManagerServerClass","synthetic":true,"types":[]},{"text":"impl Send for _GDBusObjectManagerServerPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GDBusObjectProxyClass","synthetic":true,"types":[]},{"text":"impl Send for _GDBusObjectProxyPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GDBusObjectSkeletonClass","synthetic":true,"types":[]},{"text":"impl Send for _GDBusObjectSkeletonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GDBusPropertyInfo","synthetic":true,"types":[]},{"text":"impl !Send for GDBusProxyClass","synthetic":true,"types":[]},{"text":"impl Send for _GDBusProxyPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GDBusSignalInfo","synthetic":true,"types":[]},{"text":"impl !Send for GDBusSubtreeVTable","synthetic":true,"types":[]},{"text":"impl !Send for GDataInputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GDataInputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GDataOutputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GDataOutputStreamPrivate","synthetic":true,"types":[]},{"text":"impl Send for GDatagramBasedInterface","synthetic":true,"types":[]},{"text":"impl !Send for GDesktopAppInfoClass","synthetic":true,"types":[]},{"text":"impl Send for GDesktopAppInfoLookupIface","synthetic":true,"types":[]},{"text":"impl Send for GDriveIface","synthetic":true,"types":[]},{"text":"impl Send for GDtlsClientConnectionInterface","synthetic":true,"types":[]},{"text":"impl Send for GDtlsConnectionInterface","synthetic":true,"types":[]},{"text":"impl Send for GDtlsServerConnectionInterface","synthetic":true,"types":[]},{"text":"impl Send for _GEmblemClass","synthetic":true,"types":[]},{"text":"impl !Send for GEmblemedIconClass","synthetic":true,"types":[]},{"text":"impl Send for _GEmblemedIconPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GFileAttributeInfo","synthetic":true,"types":[]},{"text":"impl !Send for GFileAttributeInfoList","synthetic":true,"types":[]},{"text":"impl Send for GFileAttributeMatcher","synthetic":true,"types":[]},{"text":"impl Send for GFileDescriptorBasedIface","synthetic":true,"types":[]},{"text":"impl !Send for GFileEnumeratorClass","synthetic":true,"types":[]},{"text":"impl Send for _GFileEnumeratorPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GFileIOStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GFileIOStreamPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GFileIconClass","synthetic":true,"types":[]},{"text":"impl Send for GFileIface","synthetic":true,"types":[]},{"text":"impl Send for _GFileInfoClass","synthetic":true,"types":[]},{"text":"impl !Send for GFileInputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GFileInputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GFileMonitorClass","synthetic":true,"types":[]},{"text":"impl Send for _GFileMonitorPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GFileOutputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GFileOutputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GFilenameCompleterClass","synthetic":true,"types":[]},{"text":"impl !Send for GFilterInputStreamClass","synthetic":true,"types":[]},{"text":"impl !Send for GFilterOutputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GIOExtension","synthetic":true,"types":[]},{"text":"impl Send for _GIOExtensionPoint","synthetic":true,"types":[]},{"text":"impl Send for _GIOModuleClass","synthetic":true,"types":[]},{"text":"impl Send for _GIOModuleScope","synthetic":true,"types":[]},{"text":"impl Send for _GIOSchedulerJob","synthetic":true,"types":[]},{"text":"impl Send for _GIOStreamAdapter","synthetic":true,"types":[]},{"text":"impl !Send for GIOStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GIOStreamPrivate","synthetic":true,"types":[]},{"text":"impl Send for GIconIface","synthetic":true,"types":[]},{"text":"impl !Send for GInetAddressClass","synthetic":true,"types":[]},{"text":"impl !Send for GInetAddressMaskClass","synthetic":true,"types":[]},{"text":"impl Send for _GInetAddressMaskPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GInetAddressPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GInetSocketAddressClass","synthetic":true,"types":[]},{"text":"impl Send for _GInetSocketAddressPrivate","synthetic":true,"types":[]},{"text":"impl Send for GInitableIface","synthetic":true,"types":[]},{"text":"impl !Send for GInputMessage","synthetic":true,"types":[]},{"text":"impl !Send for GInputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GInputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GInputVector","synthetic":true,"types":[]},{"text":"impl Send for GListModelInterface","synthetic":true,"types":[]},{"text":"impl !Send for GListStoreClass","synthetic":true,"types":[]},{"text":"impl Send for GLoadableIconIface","synthetic":true,"types":[]},{"text":"impl !Send for GMemoryInputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GMemoryInputStreamPrivate","synthetic":true,"types":[]},{"text":"impl Send for GMemoryMonitorInterface","synthetic":true,"types":[]},{"text":"impl !Send for GMemoryOutputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GMemoryOutputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GMenuAttributeIterClass","synthetic":true,"types":[]},{"text":"impl Send for _GMenuAttributeIterPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GMenuLinkIterClass","synthetic":true,"types":[]},{"text":"impl Send for _GMenuLinkIterPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GMenuModelClass","synthetic":true,"types":[]},{"text":"impl Send for _GMenuModelPrivate","synthetic":true,"types":[]},{"text":"impl Send for GMountIface","synthetic":true,"types":[]},{"text":"impl !Send for GMountOperationClass","synthetic":true,"types":[]},{"text":"impl Send for _GMountOperationPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GNativeSocketAddressClass","synthetic":true,"types":[]},{"text":"impl Send for _GNativeSocketAddressPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GNativeVolumeMonitorClass","synthetic":true,"types":[]},{"text":"impl !Send for GNetworkAddressClass","synthetic":true,"types":[]},{"text":"impl Send for _GNetworkAddressPrivate","synthetic":true,"types":[]},{"text":"impl Send for GNetworkMonitorInterface","synthetic":true,"types":[]},{"text":"impl !Send for GNetworkServiceClass","synthetic":true,"types":[]},{"text":"impl Send for _GNetworkServicePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GOutputMessage","synthetic":true,"types":[]},{"text":"impl !Send for GOutputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GOutputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GOutputVector","synthetic":true,"types":[]},{"text":"impl !Send for GPermissionClass","synthetic":true,"types":[]},{"text":"impl Send for _GPermissionPrivate","synthetic":true,"types":[]},{"text":"impl Send for GPollableInputStreamInterface","synthetic":true,"types":[]},{"text":"impl Send for GPollableOutputStreamInterface","synthetic":true,"types":[]},{"text":"impl !Send for GProxyAddressClass","synthetic":true,"types":[]},{"text":"impl !Send for GProxyAddressEnumeratorClass","synthetic":true,"types":[]},{"text":"impl Send for _GProxyAddressEnumeratorPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GProxyAddressPrivate","synthetic":true,"types":[]},{"text":"impl Send for GProxyInterface","synthetic":true,"types":[]},{"text":"impl Send for GProxyResolverInterface","synthetic":true,"types":[]},{"text":"impl Send for GRemoteActionGroupInterface","synthetic":true,"types":[]},{"text":"impl !Send for GResolverClass","synthetic":true,"types":[]},{"text":"impl Send for _GResolverPrivate","synthetic":true,"types":[]},{"text":"impl Send for GResource","synthetic":true,"types":[]},{"text":"impl Send for GSeekableIface","synthetic":true,"types":[]},{"text":"impl !Send for GSettingsBackendClass","synthetic":true,"types":[]},{"text":"impl Send for _GSettingsBackendPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GSettingsClass","synthetic":true,"types":[]},{"text":"impl Send for _GSettingsPrivate","synthetic":true,"types":[]},{"text":"impl Send for GSettingsSchema","synthetic":true,"types":[]},{"text":"impl Send for GSettingsSchemaKey","synthetic":true,"types":[]},{"text":"impl Send for GSettingsSchemaSource","synthetic":true,"types":[]},{"text":"impl !Send for GSimpleActionGroupClass","synthetic":true,"types":[]},{"text":"impl Send for _GSimpleActionGroupPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GSimpleAsyncResultClass","synthetic":true,"types":[]},{"text":"impl !Send for GSimpleProxyResolverClass","synthetic":true,"types":[]},{"text":"impl Send for _GSimpleProxyResolverPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GSocketAddressClass","synthetic":true,"types":[]},{"text":"impl !Send for GSocketAddressEnumeratorClass","synthetic":true,"types":[]},{"text":"impl !Send for GSocketClass","synthetic":true,"types":[]},{"text":"impl !Send for GSocketClientClass","synthetic":true,"types":[]},{"text":"impl Send for _GSocketClientPrivate","synthetic":true,"types":[]},{"text":"impl Send for GSocketConnectableIface","synthetic":true,"types":[]},{"text":"impl !Send for GSocketConnectionClass","synthetic":true,"types":[]},{"text":"impl Send for _GSocketConnectionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GSocketControlMessageClass","synthetic":true,"types":[]},{"text":"impl Send for _GSocketControlMessagePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GSocketListenerClass","synthetic":true,"types":[]},{"text":"impl Send for _GSocketListenerPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GSocketPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GSocketServiceClass","synthetic":true,"types":[]},{"text":"impl Send for _GSocketServicePrivate","synthetic":true,"types":[]},{"text":"impl Send for GSrvTarget","synthetic":true,"types":[]},{"text":"impl !Send for GStaticResource","synthetic":true,"types":[]},{"text":"impl Send for _GTaskClass","synthetic":true,"types":[]},{"text":"impl !Send for GTcpConnectionClass","synthetic":true,"types":[]},{"text":"impl Send for _GTcpConnectionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GTcpWrapperConnectionClass","synthetic":true,"types":[]},{"text":"impl Send for _GTcpWrapperConnectionPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GThemedIconClass","synthetic":true,"types":[]},{"text":"impl !Send for GThreadedSocketServiceClass","synthetic":true,"types":[]},{"text":"impl Send for _GThreadedSocketServicePrivate","synthetic":true,"types":[]},{"text":"impl Send for GTlsBackendInterface","synthetic":true,"types":[]},{"text":"impl !Send for GTlsCertificateClass","synthetic":true,"types":[]},{"text":"impl Send for _GTlsCertificatePrivate","synthetic":true,"types":[]},{"text":"impl Send for GTlsClientConnectionInterface","synthetic":true,"types":[]},{"text":"impl !Send for GTlsConnectionClass","synthetic":true,"types":[]},{"text":"impl Send for _GTlsConnectionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GTlsDatabaseClass","synthetic":true,"types":[]},{"text":"impl Send for _GTlsDatabasePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GTlsFileDatabaseInterface","synthetic":true,"types":[]},{"text":"impl !Send for GTlsInteractionClass","synthetic":true,"types":[]},{"text":"impl Send for _GTlsInteractionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GTlsPasswordClass","synthetic":true,"types":[]},{"text":"impl Send for _GTlsPasswordPrivate","synthetic":true,"types":[]},{"text":"impl Send for GTlsServerConnectionInterface","synthetic":true,"types":[]},{"text":"impl !Send for GUnixConnectionClass","synthetic":true,"types":[]},{"text":"impl Send for _GUnixConnectionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GUnixCredentialsMessageClass","synthetic":true,"types":[]},{"text":"impl Send for _GUnixCredentialsMessagePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GUnixFDListClass","synthetic":true,"types":[]},{"text":"impl Send for _GUnixFDListPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GUnixFDMessageClass","synthetic":true,"types":[]},{"text":"impl Send for _GUnixFDMessagePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GUnixInputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GUnixInputStreamPrivate","synthetic":true,"types":[]},{"text":"impl Send for GUnixMountEntry","synthetic":true,"types":[]},{"text":"impl Send for _GUnixMountMonitorClass","synthetic":true,"types":[]},{"text":"impl Send for GUnixMountPoint","synthetic":true,"types":[]},{"text":"impl !Send for GUnixOutputStreamClass","synthetic":true,"types":[]},{"text":"impl Send for _GUnixOutputStreamPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GUnixSocketAddressClass","synthetic":true,"types":[]},{"text":"impl Send for _GUnixSocketAddressPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GVfsClass","synthetic":true,"types":[]},{"text":"impl Send for GVolumeIface","synthetic":true,"types":[]},{"text":"impl !Send for GVolumeMonitorClass","synthetic":true,"types":[]},{"text":"impl !Send for GZlibCompressorClass","synthetic":true,"types":[]},{"text":"impl !Send for GZlibDecompressorClass","synthetic":true,"types":[]},{"text":"impl Send for GAppInfoMonitor","synthetic":true,"types":[]},{"text":"impl !Send for GAppLaunchContext","synthetic":true,"types":[]},{"text":"impl !Send for GApplication","synthetic":true,"types":[]},{"text":"impl !Send for GApplicationCommandLine","synthetic":true,"types":[]},{"text":"impl !Send for GBufferedInputStream","synthetic":true,"types":[]},{"text":"impl !Send for GBufferedOutputStream","synthetic":true,"types":[]},{"text":"impl Send for GBytesIcon","synthetic":true,"types":[]},{"text":"impl !Send for GCancellable","synthetic":true,"types":[]},{"text":"impl Send for GCharsetConverter","synthetic":true,"types":[]},{"text":"impl !Send for GConverterInputStream","synthetic":true,"types":[]},{"text":"impl !Send for GConverterOutputStream","synthetic":true,"types":[]},{"text":"impl Send for GCredentials","synthetic":true,"types":[]},{"text":"impl Send for GDBusActionGroup","synthetic":true,"types":[]},{"text":"impl Send for GDBusAuthObserver","synthetic":true,"types":[]},{"text":"impl Send for GDBusConnection","synthetic":true,"types":[]},{"text":"impl !Send for GDBusInterfaceSkeleton","synthetic":true,"types":[]},{"text":"impl Send for GDBusMenuModel","synthetic":true,"types":[]},{"text":"impl Send for GDBusMessage","synthetic":true,"types":[]},{"text":"impl Send for GDBusMethodInvocation","synthetic":true,"types":[]},{"text":"impl !Send for GDBusObjectManagerClient","synthetic":true,"types":[]},{"text":"impl !Send for GDBusObjectManagerServer","synthetic":true,"types":[]},{"text":"impl !Send for GDBusObjectProxy","synthetic":true,"types":[]},{"text":"impl !Send for GDBusObjectSkeleton","synthetic":true,"types":[]},{"text":"impl !Send for GDBusProxy","synthetic":true,"types":[]},{"text":"impl Send for GDBusServer","synthetic":true,"types":[]},{"text":"impl !Send for GDataInputStream","synthetic":true,"types":[]},{"text":"impl !Send for GDataOutputStream","synthetic":true,"types":[]},{"text":"impl Send for GDesktopAppInfo","synthetic":true,"types":[]},{"text":"impl Send for GEmblem","synthetic":true,"types":[]},{"text":"impl !Send for GEmblemedIcon","synthetic":true,"types":[]},{"text":"impl !Send for GFileEnumerator","synthetic":true,"types":[]},{"text":"impl !Send for GFileIOStream","synthetic":true,"types":[]},{"text":"impl Send for GFileIcon","synthetic":true,"types":[]},{"text":"impl Send for GFileInfo","synthetic":true,"types":[]},{"text":"impl !Send for GFileInputStream","synthetic":true,"types":[]},{"text":"impl !Send for GFileMonitor","synthetic":true,"types":[]},{"text":"impl !Send for GFileOutputStream","synthetic":true,"types":[]},{"text":"impl Send for GFilenameCompleter","synthetic":true,"types":[]},{"text":"impl !Send for GFilterInputStream","synthetic":true,"types":[]},{"text":"impl !Send for GFilterOutputStream","synthetic":true,"types":[]},{"text":"impl Send for GIOModule","synthetic":true,"types":[]},{"text":"impl !Send for GIOStream","synthetic":true,"types":[]},{"text":"impl !Send for GInetAddress","synthetic":true,"types":[]},{"text":"impl !Send for GInetAddressMask","synthetic":true,"types":[]},{"text":"impl !Send for GInetSocketAddress","synthetic":true,"types":[]},{"text":"impl !Send for GInputStream","synthetic":true,"types":[]},{"text":"impl Send for GListStore","synthetic":true,"types":[]},{"text":"impl !Send for GMemoryInputStream","synthetic":true,"types":[]},{"text":"impl !Send for GMemoryOutputStream","synthetic":true,"types":[]},{"text":"impl Send for GMenu","synthetic":true,"types":[]},{"text":"impl !Send for GMenuAttributeIter","synthetic":true,"types":[]},{"text":"impl Send for GMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for GMenuLinkIter","synthetic":true,"types":[]},{"text":"impl !Send for GMenuModel","synthetic":true,"types":[]},{"text":"impl !Send for GMountOperation","synthetic":true,"types":[]},{"text":"impl !Send for GNativeSocketAddress","synthetic":true,"types":[]},{"text":"impl !Send for GNativeVolumeMonitor","synthetic":true,"types":[]},{"text":"impl !Send for GNetworkAddress","synthetic":true,"types":[]},{"text":"impl !Send for GNetworkService","synthetic":true,"types":[]},{"text":"impl Send for GNotification","synthetic":true,"types":[]},{"text":"impl !Send for GOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for GPermission","synthetic":true,"types":[]},{"text":"impl Send for GPropertyAction","synthetic":true,"types":[]},{"text":"impl !Send for GProxyAddress","synthetic":true,"types":[]},{"text":"impl !Send for GProxyAddressEnumerator","synthetic":true,"types":[]},{"text":"impl !Send for GResolver","synthetic":true,"types":[]},{"text":"impl !Send for GSettings","synthetic":true,"types":[]},{"text":"impl !Send for GSettingsBackend","synthetic":true,"types":[]},{"text":"impl Send for GSimpleAction","synthetic":true,"types":[]},{"text":"impl !Send for GSimpleActionGroup","synthetic":true,"types":[]},{"text":"impl Send for GSimpleAsyncResult","synthetic":true,"types":[]},{"text":"impl Send for GSimpleIOStream","synthetic":true,"types":[]},{"text":"impl Send for GSimplePermission","synthetic":true,"types":[]},{"text":"impl !Send for GSimpleProxyResolver","synthetic":true,"types":[]},{"text":"impl !Send for GSocket","synthetic":true,"types":[]},{"text":"impl !Send for GSocketAddress","synthetic":true,"types":[]},{"text":"impl !Send for GSocketAddressEnumerator","synthetic":true,"types":[]},{"text":"impl !Send for GSocketClient","synthetic":true,"types":[]},{"text":"impl !Send for GSocketConnection","synthetic":true,"types":[]},{"text":"impl !Send for GSocketControlMessage","synthetic":true,"types":[]},{"text":"impl !Send for GSocketListener","synthetic":true,"types":[]},{"text":"impl !Send for GSocketService","synthetic":true,"types":[]},{"text":"impl Send for GSubprocess","synthetic":true,"types":[]},{"text":"impl Send for GSubprocessLauncher","synthetic":true,"types":[]},{"text":"impl Send for GTask","synthetic":true,"types":[]},{"text":"impl !Send for GTcpConnection","synthetic":true,"types":[]},{"text":"impl !Send for GTcpWrapperConnection","synthetic":true,"types":[]},{"text":"impl Send for GTestDBus","synthetic":true,"types":[]},{"text":"impl Send for GThemedIcon","synthetic":true,"types":[]},{"text":"impl !Send for GThreadedSocketService","synthetic":true,"types":[]},{"text":"impl !Send for GTlsCertificate","synthetic":true,"types":[]},{"text":"impl !Send for GTlsConnection","synthetic":true,"types":[]},{"text":"impl !Send for GTlsDatabase","synthetic":true,"types":[]},{"text":"impl !Send for GTlsInteraction","synthetic":true,"types":[]},{"text":"impl !Send for GTlsPassword","synthetic":true,"types":[]},{"text":"impl !Send for GUnixConnection","synthetic":true,"types":[]},{"text":"impl !Send for GUnixCredentialsMessage","synthetic":true,"types":[]},{"text":"impl !Send for GUnixFDList","synthetic":true,"types":[]},{"text":"impl !Send for GUnixFDMessage","synthetic":true,"types":[]},{"text":"impl !Send for GUnixInputStream","synthetic":true,"types":[]},{"text":"impl Send for GUnixMountMonitor","synthetic":true,"types":[]},{"text":"impl !Send for GUnixOutputStream","synthetic":true,"types":[]},{"text":"impl !Send for GUnixSocketAddress","synthetic":true,"types":[]},{"text":"impl !Send for GVfs","synthetic":true,"types":[]},{"text":"impl !Send for GVolumeMonitor","synthetic":true,"types":[]},{"text":"impl Send for GZlibCompressor","synthetic":true,"types":[]},{"text":"impl Send for GZlibDecompressor","synthetic":true,"types":[]},{"text":"impl Send for GAction","synthetic":true,"types":[]},{"text":"impl Send for GActionGroup","synthetic":true,"types":[]},{"text":"impl Send for GActionMap","synthetic":true,"types":[]},{"text":"impl Send for GAppInfo","synthetic":true,"types":[]},{"text":"impl Send for GAsyncInitable","synthetic":true,"types":[]},{"text":"impl Send for GAsyncResult","synthetic":true,"types":[]},{"text":"impl Send for GConverter","synthetic":true,"types":[]},{"text":"impl Send for GDBusInterface","synthetic":true,"types":[]},{"text":"impl Send for GDBusObject","synthetic":true,"types":[]},{"text":"impl Send for GDBusObjectManager","synthetic":true,"types":[]},{"text":"impl Send for GDatagramBased","synthetic":true,"types":[]},{"text":"impl Send for GDesktopAppInfoLookup","synthetic":true,"types":[]},{"text":"impl Send for GDrive","synthetic":true,"types":[]},{"text":"impl Send for GDtlsClientConnection","synthetic":true,"types":[]},{"text":"impl Send for GDtlsConnection","synthetic":true,"types":[]},{"text":"impl Send for GDtlsServerConnection","synthetic":true,"types":[]},{"text":"impl Send for GFile","synthetic":true,"types":[]},{"text":"impl Send for GFileDescriptorBased","synthetic":true,"types":[]},{"text":"impl Send for GIcon","synthetic":true,"types":[]},{"text":"impl Send for GInitable","synthetic":true,"types":[]},{"text":"impl Send for GListModel","synthetic":true,"types":[]},{"text":"impl Send for GLoadableIcon","synthetic":true,"types":[]},{"text":"impl Send for GMemoryMonitor","synthetic":true,"types":[]},{"text":"impl Send for GMount","synthetic":true,"types":[]},{"text":"impl Send for GNetworkMonitor","synthetic":true,"types":[]},{"text":"impl Send for GPollableInputStream","synthetic":true,"types":[]},{"text":"impl Send for GPollableOutputStream","synthetic":true,"types":[]},{"text":"impl Send for GProxy","synthetic":true,"types":[]},{"text":"impl Send for GProxyResolver","synthetic":true,"types":[]},{"text":"impl Send for GRemoteActionGroup","synthetic":true,"types":[]},{"text":"impl Send for GSeekable","synthetic":true,"types":[]},{"text":"impl Send for GSocketConnectable","synthetic":true,"types":[]},{"text":"impl Send for GTlsBackend","synthetic":true,"types":[]},{"text":"impl Send for GTlsClientConnection","synthetic":true,"types":[]},{"text":"impl Send for GTlsFileDatabase","synthetic":true,"types":[]},{"text":"impl Send for GTlsServerConnection","synthetic":true,"types":[]},{"text":"impl Send for GVolume","synthetic":true,"types":[]}];
implementors["glib"] = [{"text":"impl&lt;T, MM&gt; !Send for Boxed&lt;T, MM&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, MM&gt; !Send for Shared&lt;T, MM&gt;","synthetic":true,"types":[]},{"text":"impl Send for BoolError","synthetic":true,"types":[]},{"text":"impl !Send for ObjectRef","synthetic":true,"types":[]},{"text":"impl !Send for Object","synthetic":true,"types":[]},{"text":"impl !Send for InitiallyUnowned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BindingBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for KeyFile","synthetic":true,"types":[]},{"text":"impl Send for ChecksumType","synthetic":true,"types":[]},{"text":"impl Send for DateMonth","synthetic":true,"types":[]},{"text":"impl Send for DateWeekday","synthetic":true,"types":[]},{"text":"impl Send for KeyFileError","synthetic":true,"types":[]},{"text":"impl Send for OptionArg","synthetic":true,"types":[]},{"text":"impl Send for SeekType","synthetic":true,"types":[]},{"text":"impl Send for TimeType","synthetic":true,"types":[]},{"text":"impl Send for FileTest","synthetic":true,"types":[]},{"text":"impl Send for FormatSizeFlags","synthetic":true,"types":[]},{"text":"impl Send for IOCondition","synthetic":true,"types":[]},{"text":"impl Send for KeyFileFlags","synthetic":true,"types":[]},{"text":"impl Send for LogLevelFlags","synthetic":true,"types":[]},{"text":"impl Send for OptionFlags","synthetic":true,"types":[]},{"text":"impl Send for SpawnFlags","synthetic":true,"types":[]},{"text":"impl Send for BindingFlags","synthetic":true,"types":[]},{"text":"impl Send for ParamFlags","synthetic":true,"types":[]},{"text":"impl Send for SignalFlags","synthetic":true,"types":[]},{"text":"impl !Send for ByteArray","synthetic":true,"types":[]},{"text":"impl Send for Char","synthetic":true,"types":[]},{"text":"impl Send for UChar","synthetic":true,"types":[]},{"text":"impl Send for UserDirectory","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for FlagsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FileError","synthetic":true,"types":[]},{"text":"impl Send for SignalHandlerId","synthetic":true,"types":[]},{"text":"impl Send for Inhibit","synthetic":true,"types":[]},{"text":"impl Send for SourceId","synthetic":true,"types":[]},{"text":"impl Send for Continue","synthetic":true,"types":[]},{"text":"impl Send for Priority","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, T:&nbsp;?Sized&gt; Send for Stash&lt;'a, P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToGlibPtr&lt;'a, P&gt;&gt;::Storage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, T:&nbsp;?Sized&gt; Send for StashMut&lt;'a, P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToGlibPtrMut&lt;'a, P&gt;&gt;::Storage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Borrowed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for List","synthetic":true,"types":[]},{"text":"impl !Send for SList","synthetic":true,"types":[]},{"text":"impl !Send for HashTable","synthetic":true,"types":[]},{"text":"impl !Send for Array","synthetic":true,"types":[]},{"text":"impl !Send for PtrArray","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SyncSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GetError","synthetic":true,"types":[]},{"text":"impl !Send for Value","synthetic":true,"types":[]},{"text":"impl !Send for ValueArray","synthetic":true,"types":[]},{"text":"impl !Send for VariantDict","synthetic":true,"types":[]},{"text":"impl Send for VariantTy","synthetic":true,"types":[]},{"text":"impl !Send for ValueArray","synthetic":true,"types":[]},{"text":"impl Send for Quark","synthetic":true,"types":[]},{"text":"impl Send for LogHandlerId","synthetic":true,"types":[]},{"text":"impl Send for LogLevel","synthetic":true,"types":[]},{"text":"impl Send for LogLevels","synthetic":true,"types":[]},{"text":"impl Send for BorrowError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InstanceStruct&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as ObjectSubclass&gt;::ParentType as ObjectType&gt;::GlibType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ClassStruct&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as ObjectSubclass&gt;::ParentType as ObjectType&gt;::GlibClassType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InitializingType&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SignalInvocationHint","synthetic":true,"types":[]},{"text":"impl !Send for SignalClassHandlerToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Property&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Boxed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Send for SourceFuture&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Send for SourceStream&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsClassFor&gt; Send for ClassRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for ObjectClass","synthetic":false,"types":[]},{"text":"impl Send for InitiallyUnownedClass","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ObjectType + Send + Sync&gt; Send for WeakRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ObjectType&gt; Send for SendWeakRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Checksum","synthetic":false,"types":[]},{"text":"impl Send for DateTime","synthetic":false,"types":[]},{"text":"impl Send for MainContext","synthetic":false,"types":[]},{"text":"impl Send for MainLoop","synthetic":false,"types":[]},{"text":"impl Send for Source","synthetic":false,"types":[]},{"text":"impl Send for TimeZone","synthetic":false,"types":[]},{"text":"impl Send for BindingClass","synthetic":false,"types":[]},{"text":"impl Send for Binding","synthetic":false,"types":[]},{"text":"impl Send for Bytes","synthetic":false,"types":[]},{"text":"impl Send for String","synthetic":false,"types":[]},{"text":"impl Send for Closure","synthetic":false,"types":[]},{"text":"impl Send for EnumClass","synthetic":false,"types":[]},{"text":"impl Send for EnumValue","synthetic":false,"types":[]},{"text":"impl Send for FlagsClass","synthetic":false,"types":[]},{"text":"impl Send for FlagsValue","synthetic":false,"types":[]},{"text":"impl Send for Pid","synthetic":false,"types":[]},{"text":"impl Send for GString","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for TypedValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for SendValue","synthetic":false,"types":[]},{"text":"impl Send for Variant","synthetic":false,"types":[]},{"text":"impl Send for VariantType","synthetic":false,"types":[]},{"text":"impl Send for Date","synthetic":false,"types":[]},{"text":"impl Send for ParamSpec","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;SendUnique&gt; Send for SendUniqueCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for TypeData","synthetic":false,"types":[]},{"text":"impl Send for ThreadPool","synthetic":false,"types":[]}];
implementors["glib_sys"] = [{"text":"impl Send for GPollFD","synthetic":true,"types":[]},{"text":"impl Send for GDoubleIEEE754","synthetic":true,"types":[]},{"text":"impl Send for GFloatIEEE754","synthetic":true,"types":[]},{"text":"impl !Send for GMutex","synthetic":true,"types":[]},{"text":"impl !Send for GTokenValue","synthetic":true,"types":[]},{"text":"impl !Send for GVariantBuilder_u","synthetic":true,"types":[]},{"text":"impl !Send for GVariantDict_u","synthetic":true,"types":[]},{"text":"impl !Send for GArray","synthetic":true,"types":[]},{"text":"impl Send for _GAsyncQueue","synthetic":true,"types":[]},{"text":"impl Send for _GBookmarkFile","synthetic":true,"types":[]},{"text":"impl !Send for GByteArray","synthetic":true,"types":[]},{"text":"impl Send for GBytes","synthetic":true,"types":[]},{"text":"impl Send for GChecksum","synthetic":true,"types":[]},{"text":"impl !Send for GCond","synthetic":true,"types":[]},{"text":"impl Send for _GData","synthetic":true,"types":[]},{"text":"impl Send for GDate","synthetic":true,"types":[]},{"text":"impl Send for GDateTime","synthetic":true,"types":[]},{"text":"impl !Send for GDebugKey","synthetic":true,"types":[]},{"text":"impl Send for _GDir","synthetic":true,"types":[]},{"text":"impl Send for GDoubleIEEE754_mpn","synthetic":true,"types":[]},{"text":"impl !Send for GError","synthetic":true,"types":[]},{"text":"impl Send for GFloatIEEE754_mpn","synthetic":true,"types":[]},{"text":"impl Send for GHashTable","synthetic":true,"types":[]},{"text":"impl !Send for GHashTableIter","synthetic":true,"types":[]},{"text":"impl Send for _GHmac","synthetic":true,"types":[]},{"text":"impl !Send for GHook","synthetic":true,"types":[]},{"text":"impl !Send for GHookList","synthetic":true,"types":[]},{"text":"impl Send for _GIConv","synthetic":true,"types":[]},{"text":"impl !Send for GIOChannel","synthetic":true,"types":[]},{"text":"impl Send for GIOFuncs","synthetic":true,"types":[]},{"text":"impl Send for GKeyFile","synthetic":true,"types":[]},{"text":"impl !Send for GList","synthetic":true,"types":[]},{"text":"impl !Send for GLogField","synthetic":true,"types":[]},{"text":"impl Send for GMainContext","synthetic":true,"types":[]},{"text":"impl Send for GMainLoop","synthetic":true,"types":[]},{"text":"impl Send for GMappedFile","synthetic":true,"types":[]},{"text":"impl Send for GMarkupParseContext","synthetic":true,"types":[]},{"text":"impl Send for GMarkupParser","synthetic":true,"types":[]},{"text":"impl Send for GMatchInfo","synthetic":true,"types":[]},{"text":"impl Send for GMemVTable","synthetic":true,"types":[]},{"text":"impl !Send for GNode","synthetic":true,"types":[]},{"text":"impl !Send for GOnce","synthetic":true,"types":[]},{"text":"impl Send for _GOptionContext","synthetic":true,"types":[]},{"text":"impl !Send for GOptionEntry","synthetic":true,"types":[]},{"text":"impl Send for GOptionGroup","synthetic":true,"types":[]},{"text":"impl Send for _GPatternSpec","synthetic":true,"types":[]},{"text":"impl !Send for GPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GPtrArray","synthetic":true,"types":[]},{"text":"impl !Send for GQueue","synthetic":true,"types":[]},{"text":"impl !Send for GRWLock","synthetic":true,"types":[]},{"text":"impl Send for _GRand","synthetic":true,"types":[]},{"text":"impl !Send for GRecMutex","synthetic":true,"types":[]},{"text":"impl Send for GRegex","synthetic":true,"types":[]},{"text":"impl !Send for GSList","synthetic":true,"types":[]},{"text":"impl !Send for GScanner","synthetic":true,"types":[]},{"text":"impl !Send for GScannerConfig","synthetic":true,"types":[]},{"text":"impl Send for _GSequence","synthetic":true,"types":[]},{"text":"impl Send for _GSequenceIter","synthetic":true,"types":[]},{"text":"impl !Send for GSource","synthetic":true,"types":[]},{"text":"impl Send for GSourceCallbackFuncs","synthetic":true,"types":[]},{"text":"impl Send for GSourceFuncs","synthetic":true,"types":[]},{"text":"impl Send for _GSourcePrivate","synthetic":true,"types":[]},{"text":"impl Send for _GStatBuf","synthetic":true,"types":[]},{"text":"impl !Send for GString","synthetic":true,"types":[]},{"text":"impl Send for _GStringChunk","synthetic":true,"types":[]},{"text":"impl Send for _GTestCase","synthetic":true,"types":[]},{"text":"impl Send for GTestConfig","synthetic":true,"types":[]},{"text":"impl !Send for GTestLogBuffer","synthetic":true,"types":[]},{"text":"impl !Send for GTestLogMsg","synthetic":true,"types":[]},{"text":"impl Send for _GTestSuite","synthetic":true,"types":[]},{"text":"impl Send for GThread","synthetic":true,"types":[]},{"text":"impl !Send for GThreadPool","synthetic":true,"types":[]},{"text":"impl Send for GTimeVal","synthetic":true,"types":[]},{"text":"impl Send for GTimeZone","synthetic":true,"types":[]},{"text":"impl Send for _GTimer","synthetic":true,"types":[]},{"text":"impl !Send for GTrashStack","synthetic":true,"types":[]},{"text":"impl Send for _GTree","synthetic":true,"types":[]},{"text":"impl Send for GVariant","synthetic":true,"types":[]},{"text":"impl !Send for GVariantBuilder","synthetic":true,"types":[]},{"text":"impl !Send for GVariantBuilder_u_s","synthetic":true,"types":[]},{"text":"impl !Send for GVariantDict","synthetic":true,"types":[]},{"text":"impl !Send for GVariantDict_u_s","synthetic":true,"types":[]},{"text":"impl Send for GVariantIter","synthetic":true,"types":[]},{"text":"impl Send for GVariantType","synthetic":true,"types":[]}];
implementors["gobject_sys"] = [{"text":"impl Send for GTypeCValue","synthetic":true,"types":[]},{"text":"impl !Send for GValue_data","synthetic":true,"types":[]},{"text":"impl !Send for GWeakRef_priv","synthetic":true,"types":[]},{"text":"impl Send for GCClosure","synthetic":true,"types":[]},{"text":"impl Send for GClosure","synthetic":true,"types":[]},{"text":"impl !Send for GClosureNotifyData","synthetic":true,"types":[]},{"text":"impl !Send for GEnumClass","synthetic":true,"types":[]},{"text":"impl !Send for GEnumValue","synthetic":true,"types":[]},{"text":"impl !Send for GFlagsClass","synthetic":true,"types":[]},{"text":"impl !Send for GFlagsValue","synthetic":true,"types":[]},{"text":"impl !Send for GInitiallyUnownedClass","synthetic":true,"types":[]},{"text":"impl !Send for GInterfaceInfo","synthetic":true,"types":[]},{"text":"impl !Send for GObjectClass","synthetic":true,"types":[]},{"text":"impl !Send for GObjectConstructParam","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecClass","synthetic":true,"types":[]},{"text":"impl Send for _GParamSpecPool","synthetic":true,"types":[]},{"text":"impl Send for GParamSpecTypeInfo","synthetic":true,"types":[]},{"text":"impl !Send for GParameter","synthetic":true,"types":[]},{"text":"impl Send for GSignalInvocationHint","synthetic":true,"types":[]},{"text":"impl !Send for GSignalQuery","synthetic":true,"types":[]},{"text":"impl Send for GTypeClass","synthetic":true,"types":[]},{"text":"impl Send for GTypeFundamentalInfo","synthetic":true,"types":[]},{"text":"impl !Send for GTypeInfo","synthetic":true,"types":[]},{"text":"impl !Send for GTypeInstance","synthetic":true,"types":[]},{"text":"impl Send for GTypeInterface","synthetic":true,"types":[]},{"text":"impl !Send for GTypeModuleClass","synthetic":true,"types":[]},{"text":"impl Send for GTypePluginClass","synthetic":true,"types":[]},{"text":"impl !Send for GTypeQuery","synthetic":true,"types":[]},{"text":"impl !Send for GTypeValueTable","synthetic":true,"types":[]},{"text":"impl !Send for GValue","synthetic":true,"types":[]},{"text":"impl !Send for GValueArray","synthetic":true,"types":[]},{"text":"impl !Send for GWeakRef","synthetic":true,"types":[]},{"text":"impl Send for GBinding","synthetic":true,"types":[]},{"text":"impl !Send for GInitiallyUnowned","synthetic":true,"types":[]},{"text":"impl !Send for GObject","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpec","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecBoolean","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecBoxed","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecChar","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecDouble","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecEnum","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecFlags","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecFloat","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecGType","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecInt","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecInt64","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecLong","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecObject","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecOverride","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecParam","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecPointer","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecString","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecUChar","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecUInt","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecUInt64","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecULong","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecUnichar","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecValueArray","synthetic":true,"types":[]},{"text":"impl !Send for GParamSpecVariant","synthetic":true,"types":[]},{"text":"impl !Send for GTypeModule","synthetic":true,"types":[]},{"text":"impl Send for GTypePlugin","synthetic":true,"types":[]}];
implementors["gtk"] = [{"text":"impl !Send for AboutDialog","synthetic":true,"types":[]},{"text":"impl !Send for AboutDialogBuilder","synthetic":true,"types":[]},{"text":"impl !Send for AccelGroup","synthetic":true,"types":[]},{"text":"impl !Send for AccelLabel","synthetic":true,"types":[]},{"text":"impl !Send for AccelLabelBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ActionBar","synthetic":true,"types":[]},{"text":"impl !Send for ActionBarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Actionable","synthetic":true,"types":[]},{"text":"impl !Send for Adjustment","synthetic":true,"types":[]},{"text":"impl Send for AdjustmentBuilder","synthetic":true,"types":[]},{"text":"impl !Send for AppChooserButton","synthetic":true,"types":[]},{"text":"impl !Send for AppChooserButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for AppChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for AppChooserDialogBuilder","synthetic":true,"types":[]},{"text":"impl !Send for AppChooserWidget","synthetic":true,"types":[]},{"text":"impl !Send for AppChooserWidgetBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Application","synthetic":true,"types":[]},{"text":"impl !Send for ApplicationBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ApplicationWindow","synthetic":true,"types":[]},{"text":"impl !Send for ApplicationWindowBuilder","synthetic":true,"types":[]},{"text":"impl !Send for AspectFrame","synthetic":true,"types":[]},{"text":"impl !Send for AspectFrameBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Assistant","synthetic":true,"types":[]},{"text":"impl !Send for AssistantBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Bin","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for BoxBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Buildable","synthetic":true,"types":[]},{"text":"impl !Send for Builder","synthetic":true,"types":[]},{"text":"impl !Send for Button","synthetic":true,"types":[]},{"text":"impl !Send for ButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ButtonBox","synthetic":true,"types":[]},{"text":"impl !Send for ButtonBoxBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Calendar","synthetic":true,"types":[]},{"text":"impl !Send for CalendarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellArea","synthetic":true,"types":[]},{"text":"impl !Send for CellAreaBox","synthetic":true,"types":[]},{"text":"impl !Send for CellAreaBoxBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellAreaContext","synthetic":true,"types":[]},{"text":"impl !Send for CellEditable","synthetic":true,"types":[]},{"text":"impl !Send for CellLayout","synthetic":true,"types":[]},{"text":"impl !Send for CellRenderer","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererAccel","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererAccelBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererCombo","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererComboBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererPixbuf","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererPixbufBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererProgress","synthetic":true,"types":[]},{"text":"impl Send for CellRendererProgressBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererSpin","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererSpinBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererSpinner","synthetic":true,"types":[]},{"text":"impl Send for CellRendererSpinnerBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererText","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererTextBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellRendererToggle","synthetic":true,"types":[]},{"text":"impl Send for CellRendererToggleBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CellView","synthetic":true,"types":[]},{"text":"impl !Send for CellViewBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CheckButton","synthetic":true,"types":[]},{"text":"impl !Send for CheckButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for CheckMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for CheckMenuItemBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Clipboard","synthetic":true,"types":[]},{"text":"impl !Send for ColorButton","synthetic":true,"types":[]},{"text":"impl !Send for ColorButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ColorChooser","synthetic":true,"types":[]},{"text":"impl !Send for ColorChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for ColorChooserDialogBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ColorChooserWidget","synthetic":true,"types":[]},{"text":"impl !Send for ColorChooserWidgetBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ComboBox","synthetic":true,"types":[]},{"text":"impl !Send for ComboBoxBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ComboBoxText","synthetic":true,"types":[]},{"text":"impl !Send for ComboBoxTextBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Container","synthetic":true,"types":[]},{"text":"impl !Send for CssProvider","synthetic":true,"types":[]},{"text":"impl !Send for Dialog","synthetic":true,"types":[]},{"text":"impl !Send for DialogBuilder","synthetic":true,"types":[]},{"text":"impl !Send for DrawingArea","synthetic":true,"types":[]},{"text":"impl !Send for DrawingAreaBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Editable","synthetic":true,"types":[]},{"text":"impl !Send for Entry","synthetic":true,"types":[]},{"text":"impl !Send for EntryBuilder","synthetic":true,"types":[]},{"text":"impl !Send for EntryCompletion","synthetic":true,"types":[]},{"text":"impl !Send for EntryCompletionBuilder","synthetic":true,"types":[]},{"text":"impl !Send for EventBox","synthetic":true,"types":[]},{"text":"impl !Send for EventBoxBuilder","synthetic":true,"types":[]},{"text":"impl !Send for EventController","synthetic":true,"types":[]},{"text":"impl !Send for Expander","synthetic":true,"types":[]},{"text":"impl !Send for ExpanderBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FileChooser","synthetic":true,"types":[]},{"text":"impl !Send for FileChooserButton","synthetic":true,"types":[]},{"text":"impl !Send for FileChooserButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FileChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for FileChooserDialogBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FileChooserWidget","synthetic":true,"types":[]},{"text":"impl !Send for FileChooserWidgetBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FileFilter","synthetic":true,"types":[]},{"text":"impl !Send for Fixed","synthetic":true,"types":[]},{"text":"impl !Send for FixedBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FlowBox","synthetic":true,"types":[]},{"text":"impl !Send for FlowBoxBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FlowBoxChild","synthetic":true,"types":[]},{"text":"impl !Send for FlowBoxChildBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FontButton","synthetic":true,"types":[]},{"text":"impl !Send for FontButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FontChooser","synthetic":true,"types":[]},{"text":"impl !Send for FontChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for FontChooserDialogBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FontChooserWidget","synthetic":true,"types":[]},{"text":"impl !Send for FontChooserWidgetBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Frame","synthetic":true,"types":[]},{"text":"impl !Send for FrameBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Gesture","synthetic":true,"types":[]},{"text":"impl !Send for GestureDrag","synthetic":true,"types":[]},{"text":"impl !Send for GestureDragBuilder","synthetic":true,"types":[]},{"text":"impl !Send for GestureLongPress","synthetic":true,"types":[]},{"text":"impl !Send for GestureLongPressBuilder","synthetic":true,"types":[]},{"text":"impl !Send for GestureMultiPress","synthetic":true,"types":[]},{"text":"impl !Send for GestureMultiPressBuilder","synthetic":true,"types":[]},{"text":"impl !Send for GesturePan","synthetic":true,"types":[]},{"text":"impl !Send for GesturePanBuilder","synthetic":true,"types":[]},{"text":"impl !Send for GestureRotate","synthetic":true,"types":[]},{"text":"impl !Send for GestureRotateBuilder","synthetic":true,"types":[]},{"text":"impl !Send for GestureSingle","synthetic":true,"types":[]},{"text":"impl !Send for GestureSwipe","synthetic":true,"types":[]},{"text":"impl !Send for GestureSwipeBuilder","synthetic":true,"types":[]},{"text":"impl !Send for GestureZoom","synthetic":true,"types":[]},{"text":"impl !Send for GestureZoomBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Grid","synthetic":true,"types":[]},{"text":"impl !Send for GridBuilder","synthetic":true,"types":[]},{"text":"impl !Send for HeaderBar","synthetic":true,"types":[]},{"text":"impl !Send for HeaderBarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for IMContext","synthetic":true,"types":[]},{"text":"impl !Send for IMContextSimple","synthetic":true,"types":[]},{"text":"impl Send for IMContextSimpleBuilder","synthetic":true,"types":[]},{"text":"impl !Send for IMMulticontext","synthetic":true,"types":[]},{"text":"impl Send for IMMulticontextBuilder","synthetic":true,"types":[]},{"text":"impl !Send for IconInfo","synthetic":true,"types":[]},{"text":"impl !Send for IconTheme","synthetic":true,"types":[]},{"text":"impl !Send for IconView","synthetic":true,"types":[]},{"text":"impl !Send for IconViewBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Image","synthetic":true,"types":[]},{"text":"impl !Send for ImageBuilder","synthetic":true,"types":[]},{"text":"impl !Send for InfoBar","synthetic":true,"types":[]},{"text":"impl !Send for InfoBarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Invisible","synthetic":true,"types":[]},{"text":"impl !Send for InvisibleBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Label","synthetic":true,"types":[]},{"text":"impl !Send for LabelBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Layout","synthetic":true,"types":[]},{"text":"impl !Send for LayoutBuilder","synthetic":true,"types":[]},{"text":"impl !Send for LevelBar","synthetic":true,"types":[]},{"text":"impl !Send for LevelBarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for LinkButton","synthetic":true,"types":[]},{"text":"impl !Send for LinkButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ListBox","synthetic":true,"types":[]},{"text":"impl !Send for ListBoxBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ListBoxRow","synthetic":true,"types":[]},{"text":"impl !Send for ListBoxRowBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ListStore","synthetic":true,"types":[]},{"text":"impl !Send for LockButton","synthetic":true,"types":[]},{"text":"impl !Send for LockButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Menu","synthetic":true,"types":[]},{"text":"impl !Send for MenuBuilder","synthetic":true,"types":[]},{"text":"impl !Send for MenuBar","synthetic":true,"types":[]},{"text":"impl !Send for MenuBarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for MenuButton","synthetic":true,"types":[]},{"text":"impl !Send for MenuButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for MenuItem","synthetic":true,"types":[]},{"text":"impl !Send for MenuItemBuilder","synthetic":true,"types":[]},{"text":"impl !Send for MenuShell","synthetic":true,"types":[]},{"text":"impl !Send for MenuToolButton","synthetic":true,"types":[]},{"text":"impl !Send for MenuToolButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for MessageDialog","synthetic":true,"types":[]},{"text":"impl !Send for MessageDialogBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Misc","synthetic":true,"types":[]},{"text":"impl !Send for MountOperation","synthetic":true,"types":[]},{"text":"impl !Send for MountOperationBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Notebook","synthetic":true,"types":[]},{"text":"impl !Send for NotebookBuilder","synthetic":true,"types":[]},{"text":"impl !Send for OffscreenWindow","synthetic":true,"types":[]},{"text":"impl !Send for OffscreenWindowBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Orientable","synthetic":true,"types":[]},{"text":"impl !Send for Overlay","synthetic":true,"types":[]},{"text":"impl !Send for OverlayBuilder","synthetic":true,"types":[]},{"text":"impl !Send for PageSetup","synthetic":true,"types":[]},{"text":"impl !Send for Paned","synthetic":true,"types":[]},{"text":"impl !Send for PanedBuilder","synthetic":true,"types":[]},{"text":"impl !Send for PlacesSidebar","synthetic":true,"types":[]},{"text":"impl !Send for PlacesSidebarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Plug","synthetic":true,"types":[]},{"text":"impl !Send for PlugBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Popover","synthetic":true,"types":[]},{"text":"impl !Send for PopoverBuilder","synthetic":true,"types":[]},{"text":"impl !Send for PrintContext","synthetic":true,"types":[]},{"text":"impl !Send for PrintOperation","synthetic":true,"types":[]},{"text":"impl !Send for PrintOperationBuilder","synthetic":true,"types":[]},{"text":"impl !Send for PrintOperationPreview","synthetic":true,"types":[]},{"text":"impl !Send for PrintSettings","synthetic":true,"types":[]},{"text":"impl !Send for ProgressBar","synthetic":true,"types":[]},{"text":"impl !Send for ProgressBarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for RadioButton","synthetic":true,"types":[]},{"text":"impl !Send for RadioButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for RadioMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for RadioMenuItemBuilder","synthetic":true,"types":[]},{"text":"impl !Send for RadioToolButton","synthetic":true,"types":[]},{"text":"impl !Send for RadioToolButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Range","synthetic":true,"types":[]},{"text":"impl !Send for RecentChooser","synthetic":true,"types":[]},{"text":"impl !Send for RecentChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for RecentChooserDialogBuilder","synthetic":true,"types":[]},{"text":"impl !Send for RecentChooserMenu","synthetic":true,"types":[]},{"text":"impl !Send for RecentChooserMenuBuilder","synthetic":true,"types":[]},{"text":"impl !Send for RecentChooserWidget","synthetic":true,"types":[]},{"text":"impl !Send for RecentChooserWidgetBuilder","synthetic":true,"types":[]},{"text":"impl !Send for RecentFilter","synthetic":true,"types":[]},{"text":"impl !Send for RecentManager","synthetic":true,"types":[]},{"text":"impl Send for RecentManagerBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Revealer","synthetic":true,"types":[]},{"text":"impl !Send for RevealerBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Scale","synthetic":true,"types":[]},{"text":"impl !Send for ScaleBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ScaleButton","synthetic":true,"types":[]},{"text":"impl !Send for ScaleButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Scrollable","synthetic":true,"types":[]},{"text":"impl !Send for Scrollbar","synthetic":true,"types":[]},{"text":"impl !Send for ScrollbarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ScrolledWindow","synthetic":true,"types":[]},{"text":"impl !Send for ScrolledWindowBuilder","synthetic":true,"types":[]},{"text":"impl !Send for SearchBar","synthetic":true,"types":[]},{"text":"impl !Send for SearchBarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for SearchEntry","synthetic":true,"types":[]},{"text":"impl !Send for SearchEntryBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Separator","synthetic":true,"types":[]},{"text":"impl !Send for SeparatorBuilder","synthetic":true,"types":[]},{"text":"impl !Send for SeparatorMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for SeparatorMenuItemBuilder","synthetic":true,"types":[]},{"text":"impl !Send for SeparatorToolItem","synthetic":true,"types":[]},{"text":"impl !Send for SeparatorToolItemBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Settings","synthetic":true,"types":[]},{"text":"impl !Send for SizeGroup","synthetic":true,"types":[]},{"text":"impl Send for SizeGroupBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Socket","synthetic":true,"types":[]},{"text":"impl !Send for SocketBuilder","synthetic":true,"types":[]},{"text":"impl !Send for SpinButton","synthetic":true,"types":[]},{"text":"impl !Send for SpinButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Spinner","synthetic":true,"types":[]},{"text":"impl !Send for SpinnerBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Stack","synthetic":true,"types":[]},{"text":"impl !Send for StackBuilder","synthetic":true,"types":[]},{"text":"impl !Send for StackSwitcher","synthetic":true,"types":[]},{"text":"impl !Send for StackSwitcherBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Statusbar","synthetic":true,"types":[]},{"text":"impl !Send for StatusbarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for StyleContext","synthetic":true,"types":[]},{"text":"impl !Send for StyleContextBuilder","synthetic":true,"types":[]},{"text":"impl !Send for StyleProperties","synthetic":true,"types":[]},{"text":"impl !Send for StyleProvider","synthetic":true,"types":[]},{"text":"impl !Send for Switch","synthetic":true,"types":[]},{"text":"impl !Send for SwitchBuilder","synthetic":true,"types":[]},{"text":"impl !Send for TextBuffer","synthetic":true,"types":[]},{"text":"impl !Send for TextBufferBuilder","synthetic":true,"types":[]},{"text":"impl !Send for TextChildAnchor","synthetic":true,"types":[]},{"text":"impl !Send for TextMark","synthetic":true,"types":[]},{"text":"impl Send for TextMarkBuilder","synthetic":true,"types":[]},{"text":"impl !Send for TextTag","synthetic":true,"types":[]},{"text":"impl !Send for TextTagBuilder","synthetic":true,"types":[]},{"text":"impl !Send for TextTagTable","synthetic":true,"types":[]},{"text":"impl !Send for TextView","synthetic":true,"types":[]},{"text":"impl !Send for TextViewBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ToggleButton","synthetic":true,"types":[]},{"text":"impl !Send for ToggleButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ToggleToolButton","synthetic":true,"types":[]},{"text":"impl !Send for ToggleToolButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ToolButton","synthetic":true,"types":[]},{"text":"impl !Send for ToolButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ToolItem","synthetic":true,"types":[]},{"text":"impl !Send for ToolItemBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ToolItemGroup","synthetic":true,"types":[]},{"text":"impl !Send for ToolItemGroupBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ToolPalette","synthetic":true,"types":[]},{"text":"impl !Send for ToolPaletteBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ToolShell","synthetic":true,"types":[]},{"text":"impl !Send for Toolbar","synthetic":true,"types":[]},{"text":"impl !Send for ToolbarBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Tooltip","synthetic":true,"types":[]},{"text":"impl !Send for TreeDragDest","synthetic":true,"types":[]},{"text":"impl !Send for TreeDragSource","synthetic":true,"types":[]},{"text":"impl !Send for TreeModel","synthetic":true,"types":[]},{"text":"impl !Send for TreeModelFilter","synthetic":true,"types":[]},{"text":"impl !Send for TreeModelSort","synthetic":true,"types":[]},{"text":"impl !Send for TreeSelection","synthetic":true,"types":[]},{"text":"impl !Send for TreeSortable","synthetic":true,"types":[]},{"text":"impl !Send for TreeStore","synthetic":true,"types":[]},{"text":"impl !Send for TreeView","synthetic":true,"types":[]},{"text":"impl !Send for TreeViewBuilder","synthetic":true,"types":[]},{"text":"impl !Send for TreeViewColumn","synthetic":true,"types":[]},{"text":"impl !Send for TreeViewColumnBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Viewport","synthetic":true,"types":[]},{"text":"impl !Send for ViewportBuilder","synthetic":true,"types":[]},{"text":"impl !Send for VolumeButton","synthetic":true,"types":[]},{"text":"impl !Send for VolumeButtonBuilder","synthetic":true,"types":[]},{"text":"impl !Send for Widget","synthetic":true,"types":[]},{"text":"impl !Send for Window","synthetic":true,"types":[]},{"text":"impl !Send for WindowBuilder","synthetic":true,"types":[]},{"text":"impl !Send for WindowGroup","synthetic":true,"types":[]},{"text":"impl !Send for CssSection","synthetic":true,"types":[]},{"text":"impl !Send for PaperSize","synthetic":true,"types":[]},{"text":"impl !Send for RecentInfo","synthetic":true,"types":[]},{"text":"impl !Send for SelectionData","synthetic":true,"types":[]},{"text":"impl !Send for TargetList","synthetic":true,"types":[]},{"text":"impl !Send for TextAttributes","synthetic":true,"types":[]},{"text":"impl !Send for TextIter","synthetic":true,"types":[]},{"text":"impl !Send for TreeIter","synthetic":true,"types":[]},{"text":"impl !Send for TreePath","synthetic":true,"types":[]},{"text":"impl !Send for TreeRowReference","synthetic":true,"types":[]},{"text":"impl !Send for WidgetPath","synthetic":true,"types":[]},{"text":"impl Send for Align","synthetic":true,"types":[]},{"text":"impl Send for ArrowType","synthetic":true,"types":[]},{"text":"impl Send for AssistantPageType","synthetic":true,"types":[]},{"text":"impl Send for BaselinePosition","synthetic":true,"types":[]},{"text":"impl Send for BorderStyle","synthetic":true,"types":[]},{"text":"impl Send for BuilderError","synthetic":true,"types":[]},{"text":"impl Send for ButtonBoxStyle","synthetic":true,"types":[]},{"text":"impl Send for ButtonsType","synthetic":true,"types":[]},{"text":"impl Send for CellRendererAccelMode","synthetic":true,"types":[]},{"text":"impl Send for CellRendererMode","synthetic":true,"types":[]},{"text":"impl Send for CornerType","synthetic":true,"types":[]},{"text":"impl Send for CssProviderError","synthetic":true,"types":[]},{"text":"impl Send for CssSectionType","synthetic":true,"types":[]},{"text":"impl Send for DeleteType","synthetic":true,"types":[]},{"text":"impl Send for DirectionType","synthetic":true,"types":[]},{"text":"impl Send for DragResult","synthetic":true,"types":[]},{"text":"impl Send for EntryIconPosition","synthetic":true,"types":[]},{"text":"impl Send for EventSequenceState","synthetic":true,"types":[]},{"text":"impl Send for FileChooserAction","synthetic":true,"types":[]},{"text":"impl Send for FileChooserConfirmation","synthetic":true,"types":[]},{"text":"impl Send for FileChooserError","synthetic":true,"types":[]},{"text":"impl Send for IMPreeditStyle","synthetic":true,"types":[]},{"text":"impl Send for IMStatusStyle","synthetic":true,"types":[]},{"text":"impl Send for IconSize","synthetic":true,"types":[]},{"text":"impl Send for IconThemeError","synthetic":true,"types":[]},{"text":"impl Send for IconViewDropPosition","synthetic":true,"types":[]},{"text":"impl Send for ImageType","synthetic":true,"types":[]},{"text":"impl Send for InputPurpose","synthetic":true,"types":[]},{"text":"impl Send for Justification","synthetic":true,"types":[]},{"text":"impl Send for LevelBarMode","synthetic":true,"types":[]},{"text":"impl Send for License","synthetic":true,"types":[]},{"text":"impl Send for MenuDirectionType","synthetic":true,"types":[]},{"text":"impl Send for MessageType","synthetic":true,"types":[]},{"text":"impl Send for MovementStep","synthetic":true,"types":[]},{"text":"impl Send for NotebookTab","synthetic":true,"types":[]},{"text":"impl Send for NumberUpLayout","synthetic":true,"types":[]},{"text":"impl Send for Orientation","synthetic":true,"types":[]},{"text":"impl Send for PackDirection","synthetic":true,"types":[]},{"text":"impl Send for PackType","synthetic":true,"types":[]},{"text":"impl Send for PageOrientation","synthetic":true,"types":[]},{"text":"impl Send for PageSet","synthetic":true,"types":[]},{"text":"impl Send for PanDirection","synthetic":true,"types":[]},{"text":"impl Send for PolicyType","synthetic":true,"types":[]},{"text":"impl Send for PositionType","synthetic":true,"types":[]},{"text":"impl Send for PrintDuplex","synthetic":true,"types":[]},{"text":"impl Send for PrintError","synthetic":true,"types":[]},{"text":"impl Send for PrintOperationAction","synthetic":true,"types":[]},{"text":"impl Send for PrintOperationResult","synthetic":true,"types":[]},{"text":"impl Send for PrintPages","synthetic":true,"types":[]},{"text":"impl Send for PrintQuality","synthetic":true,"types":[]},{"text":"impl Send for PrintStatus","synthetic":true,"types":[]},{"text":"impl Send for PropagationPhase","synthetic":true,"types":[]},{"text":"impl Send for RecentChooserError","synthetic":true,"types":[]},{"text":"impl Send for RecentManagerError","synthetic":true,"types":[]},{"text":"impl Send for RecentSortType","synthetic":true,"types":[]},{"text":"impl Send for ReliefStyle","synthetic":true,"types":[]},{"text":"impl Send for ResizeMode","synthetic":true,"types":[]},{"text":"impl Send for RevealerTransitionType","synthetic":true,"types":[]},{"text":"impl Send for ScrollStep","synthetic":true,"types":[]},{"text":"impl Send for ScrollType","synthetic":true,"types":[]},{"text":"impl Send for ScrollablePolicy","synthetic":true,"types":[]},{"text":"impl Send for SelectionMode","synthetic":true,"types":[]},{"text":"impl Send for SensitivityType","synthetic":true,"types":[]},{"text":"impl Send for ShadowType","synthetic":true,"types":[]},{"text":"impl Send for SizeGroupMode","synthetic":true,"types":[]},{"text":"impl Send for SizeRequestMode","synthetic":true,"types":[]},{"text":"impl Send for SortType","synthetic":true,"types":[]},{"text":"impl Send for SpinButtonUpdatePolicy","synthetic":true,"types":[]},{"text":"impl Send for SpinType","synthetic":true,"types":[]},{"text":"impl Send for StackTransitionType","synthetic":true,"types":[]},{"text":"impl Send for StateType","synthetic":true,"types":[]},{"text":"impl Send for TextDirection","synthetic":true,"types":[]},{"text":"impl Send for TextViewLayer","synthetic":true,"types":[]},{"text":"impl Send for TextWindowType","synthetic":true,"types":[]},{"text":"impl Send for ToolbarStyle","synthetic":true,"types":[]},{"text":"impl Send for TreeViewColumnSizing","synthetic":true,"types":[]},{"text":"impl Send for TreeViewDropPosition","synthetic":true,"types":[]},{"text":"impl Send for TreeViewGridLines","synthetic":true,"types":[]},{"text":"impl Send for Unit","synthetic":true,"types":[]},{"text":"impl Send for WidgetHelpType","synthetic":true,"types":[]},{"text":"impl Send for WindowPosition","synthetic":true,"types":[]},{"text":"impl Send for WindowType","synthetic":true,"types":[]},{"text":"impl Send for WrapMode","synthetic":true,"types":[]},{"text":"impl Send for AccelFlags","synthetic":true,"types":[]},{"text":"impl Send for ApplicationInhibitFlags","synthetic":true,"types":[]},{"text":"impl Send for CalendarDisplayOptions","synthetic":true,"types":[]},{"text":"impl Send for CellRendererState","synthetic":true,"types":[]},{"text":"impl Send for DestDefaults","synthetic":true,"types":[]},{"text":"impl Send for DialogFlags","synthetic":true,"types":[]},{"text":"impl Send for FileFilterFlags","synthetic":true,"types":[]},{"text":"impl Send for IconLookupFlags","synthetic":true,"types":[]},{"text":"impl Send for InputHints","synthetic":true,"types":[]},{"text":"impl Send for JunctionSides","synthetic":true,"types":[]},{"text":"impl Send for PlacesOpenFlags","synthetic":true,"types":[]},{"text":"impl Send for RecentFilterFlags","synthetic":true,"types":[]},{"text":"impl Send for RegionFlags","synthetic":true,"types":[]},{"text":"impl Send for StateFlags","synthetic":true,"types":[]},{"text":"impl Send for TargetFlags","synthetic":true,"types":[]},{"text":"impl Send for TextSearchFlags","synthetic":true,"types":[]},{"text":"impl Send for ToolPaletteDragTargets","synthetic":true,"types":[]},{"text":"impl Send for TreeModelFlags","synthetic":true,"types":[]},{"text":"impl !Send for AppChooser","synthetic":true,"types":[]},{"text":"impl !Send for Border","synthetic":true,"types":[]},{"text":"impl !Send for EntryBuffer","synthetic":true,"types":[]},{"text":"impl Send for PageRange","synthetic":true,"types":[]},{"text":"impl Send for RecentData","synthetic":true,"types":[]},{"text":"impl Send for Requisition","synthetic":true,"types":[]},{"text":"impl Send for ResponseType","synthetic":true,"types":[]},{"text":"impl Send for TargetEntry","synthetic":true,"types":[]},{"text":"impl Send for SortColumn","synthetic":true,"types":[]},{"text":"impl !Send for TickCallbackId","synthetic":true,"types":[]},{"text":"impl Send for AboutDialogClass","synthetic":false,"types":[]},{"text":"impl Send for AccelGroupClass","synthetic":false,"types":[]},{"text":"impl Send for AccelLabelClass","synthetic":false,"types":[]},{"text":"impl Send for ActionBarClass","synthetic":false,"types":[]},{"text":"impl Send for AdjustmentClass","synthetic":false,"types":[]},{"text":"impl Send for AppChooserButtonClass","synthetic":false,"types":[]},{"text":"impl Send for AppChooserDialogClass","synthetic":false,"types":[]},{"text":"impl Send for AppChooserWidgetClass","synthetic":false,"types":[]},{"text":"impl Send for ApplicationClass","synthetic":false,"types":[]},{"text":"impl Send for ApplicationWindowClass","synthetic":false,"types":[]},{"text":"impl Send for AspectFrameClass","synthetic":false,"types":[]},{"text":"impl Send for AssistantClass","synthetic":false,"types":[]},{"text":"impl Send for BinClass","synthetic":false,"types":[]},{"text":"impl Send for BoxClass","synthetic":false,"types":[]},{"text":"impl Send for BuilderClass","synthetic":false,"types":[]},{"text":"impl Send for ButtonClass","synthetic":false,"types":[]},{"text":"impl Send for ButtonBoxClass","synthetic":false,"types":[]},{"text":"impl Send for CalendarClass","synthetic":false,"types":[]},{"text":"impl Send for CellAreaClass","synthetic":false,"types":[]},{"text":"impl Send for CellAreaBoxClass","synthetic":false,"types":[]},{"text":"impl Send for CellAreaContextClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererAccelClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererComboClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererPixbufClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererProgressClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererSpinClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererSpinnerClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererTextClass","synthetic":false,"types":[]},{"text":"impl Send for CellRendererToggleClass","synthetic":false,"types":[]},{"text":"impl Send for CellViewClass","synthetic":false,"types":[]},{"text":"impl Send for CheckButtonClass","synthetic":false,"types":[]},{"text":"impl Send for CheckMenuItemClass","synthetic":false,"types":[]},{"text":"impl Send for ClipboardClass","synthetic":false,"types":[]},{"text":"impl Send for ColorButtonClass","synthetic":false,"types":[]},{"text":"impl Send for ColorChooserDialogClass","synthetic":false,"types":[]},{"text":"impl Send for ColorChooserWidgetClass","synthetic":false,"types":[]},{"text":"impl Send for ComboBoxClass","synthetic":false,"types":[]},{"text":"impl Send for ComboBoxTextClass","synthetic":false,"types":[]},{"text":"impl Send for ContainerClass","synthetic":false,"types":[]},{"text":"impl Send for CssProviderClass","synthetic":false,"types":[]},{"text":"impl Send for DialogClass","synthetic":false,"types":[]},{"text":"impl Send for DrawingAreaClass","synthetic":false,"types":[]},{"text":"impl Send for EntryClass","synthetic":false,"types":[]},{"text":"impl Send for EntryCompletionClass","synthetic":false,"types":[]},{"text":"impl Send for EventBoxClass","synthetic":false,"types":[]},{"text":"impl Send for EventControllerClass","synthetic":false,"types":[]},{"text":"impl Send for ExpanderClass","synthetic":false,"types":[]},{"text":"impl Send for FileChooserButtonClass","synthetic":false,"types":[]},{"text":"impl Send for FileChooserDialogClass","synthetic":false,"types":[]},{"text":"impl Send for FileChooserWidgetClass","synthetic":false,"types":[]},{"text":"impl Send for FileFilterClass","synthetic":false,"types":[]},{"text":"impl Send for FixedClass","synthetic":false,"types":[]},{"text":"impl Send for FlowBoxClass","synthetic":false,"types":[]},{"text":"impl Send for FlowBoxChildClass","synthetic":false,"types":[]},{"text":"impl Send for FontButtonClass","synthetic":false,"types":[]},{"text":"impl Send for FontChooserDialogClass","synthetic":false,"types":[]},{"text":"impl Send for FontChooserWidgetClass","synthetic":false,"types":[]},{"text":"impl Send for FrameClass","synthetic":false,"types":[]},{"text":"impl Send for GestureClass","synthetic":false,"types":[]},{"text":"impl Send for GestureDragClass","synthetic":false,"types":[]},{"text":"impl Send for GestureLongPressClass","synthetic":false,"types":[]},{"text":"impl Send for GestureMultiPressClass","synthetic":false,"types":[]},{"text":"impl Send for GesturePanClass","synthetic":false,"types":[]},{"text":"impl Send for GestureRotateClass","synthetic":false,"types":[]},{"text":"impl Send for GestureSingleClass","synthetic":false,"types":[]},{"text":"impl Send for GestureSwipeClass","synthetic":false,"types":[]},{"text":"impl Send for GestureZoomClass","synthetic":false,"types":[]},{"text":"impl Send for GridClass","synthetic":false,"types":[]},{"text":"impl Send for HeaderBarClass","synthetic":false,"types":[]},{"text":"impl Send for IMContextClass","synthetic":false,"types":[]},{"text":"impl Send for IMContextSimpleClass","synthetic":false,"types":[]},{"text":"impl Send for IMMulticontextClass","synthetic":false,"types":[]},{"text":"impl Send for IconInfoClass","synthetic":false,"types":[]},{"text":"impl Send for IconThemeClass","synthetic":false,"types":[]},{"text":"impl Send for IconViewClass","synthetic":false,"types":[]},{"text":"impl Send for ImageClass","synthetic":false,"types":[]},{"text":"impl Send for InfoBarClass","synthetic":false,"types":[]},{"text":"impl Send for InvisibleClass","synthetic":false,"types":[]},{"text":"impl Send for LabelClass","synthetic":false,"types":[]},{"text":"impl Send for LayoutClass","synthetic":false,"types":[]},{"text":"impl Send for LevelBarClass","synthetic":false,"types":[]},{"text":"impl Send for LinkButtonClass","synthetic":false,"types":[]},{"text":"impl Send for ListBoxClass","synthetic":false,"types":[]},{"text":"impl Send for ListBoxRowClass","synthetic":false,"types":[]},{"text":"impl Send for ListStoreClass","synthetic":false,"types":[]},{"text":"impl Send for LockButtonClass","synthetic":false,"types":[]},{"text":"impl Send for MenuClass","synthetic":false,"types":[]},{"text":"impl Send for MenuBarClass","synthetic":false,"types":[]},{"text":"impl Send for MenuButtonClass","synthetic":false,"types":[]},{"text":"impl Send for MenuItemClass","synthetic":false,"types":[]},{"text":"impl Send for MenuShellClass","synthetic":false,"types":[]},{"text":"impl Send for MenuToolButtonClass","synthetic":false,"types":[]},{"text":"impl Send for MessageDialogClass","synthetic":false,"types":[]},{"text":"impl Send for MiscClass","synthetic":false,"types":[]},{"text":"impl Send for MountOperationClass","synthetic":false,"types":[]},{"text":"impl Send for NotebookClass","synthetic":false,"types":[]},{"text":"impl Send for OffscreenWindowClass","synthetic":false,"types":[]},{"text":"impl Send for OverlayClass","synthetic":false,"types":[]},{"text":"impl Send for PageSetupClass","synthetic":false,"types":[]},{"text":"impl Send for PanedClass","synthetic":false,"types":[]},{"text":"impl Send for PlacesSidebarClass","synthetic":false,"types":[]},{"text":"impl Send for PlugClass","synthetic":false,"types":[]},{"text":"impl Send for PopoverClass","synthetic":false,"types":[]},{"text":"impl Send for PrintContextClass","synthetic":false,"types":[]},{"text":"impl Send for PrintOperationClass","synthetic":false,"types":[]},{"text":"impl Send for PrintSettingsClass","synthetic":false,"types":[]},{"text":"impl Send for ProgressBarClass","synthetic":false,"types":[]},{"text":"impl Send for RadioButtonClass","synthetic":false,"types":[]},{"text":"impl Send for RadioMenuItemClass","synthetic":false,"types":[]},{"text":"impl Send for RadioToolButtonClass","synthetic":false,"types":[]},{"text":"impl Send for RangeClass","synthetic":false,"types":[]},{"text":"impl Send for RecentChooserDialogClass","synthetic":false,"types":[]},{"text":"impl Send for RecentChooserMenuClass","synthetic":false,"types":[]},{"text":"impl Send for RecentChooserWidgetClass","synthetic":false,"types":[]},{"text":"impl Send for RecentFilterClass","synthetic":false,"types":[]},{"text":"impl Send for RecentManagerClass","synthetic":false,"types":[]},{"text":"impl Send for RevealerClass","synthetic":false,"types":[]},{"text":"impl Send for ScaleClass","synthetic":false,"types":[]},{"text":"impl Send for ScaleButtonClass","synthetic":false,"types":[]},{"text":"impl Send for ScrollbarClass","synthetic":false,"types":[]},{"text":"impl Send for ScrolledWindowClass","synthetic":false,"types":[]},{"text":"impl Send for SearchBarClass","synthetic":false,"types":[]},{"text":"impl Send for SearchEntryClass","synthetic":false,"types":[]},{"text":"impl Send for SeparatorClass","synthetic":false,"types":[]},{"text":"impl Send for SeparatorMenuItemClass","synthetic":false,"types":[]},{"text":"impl Send for SeparatorToolItemClass","synthetic":false,"types":[]},{"text":"impl Send for SettingsClass","synthetic":false,"types":[]},{"text":"impl Send for SizeGroupClass","synthetic":false,"types":[]},{"text":"impl Send for SocketClass","synthetic":false,"types":[]},{"text":"impl Send for SpinButtonClass","synthetic":false,"types":[]},{"text":"impl Send for SpinnerClass","synthetic":false,"types":[]},{"text":"impl Send for StackClass","synthetic":false,"types":[]},{"text":"impl Send for StackSwitcherClass","synthetic":false,"types":[]},{"text":"impl Send for StatusbarClass","synthetic":false,"types":[]},{"text":"impl Send for StyleContextClass","synthetic":false,"types":[]},{"text":"impl Send for StylePropertiesClass","synthetic":false,"types":[]},{"text":"impl Send for SwitchClass","synthetic":false,"types":[]},{"text":"impl Send for TextBufferClass","synthetic":false,"types":[]},{"text":"impl Send for TextChildAnchorClass","synthetic":false,"types":[]},{"text":"impl Send for TextMarkClass","synthetic":false,"types":[]},{"text":"impl Send for TextTagClass","synthetic":false,"types":[]},{"text":"impl Send for TextTagTableClass","synthetic":false,"types":[]},{"text":"impl Send for TextViewClass","synthetic":false,"types":[]},{"text":"impl Send for ToggleButtonClass","synthetic":false,"types":[]},{"text":"impl Send for ToggleToolButtonClass","synthetic":false,"types":[]},{"text":"impl Send for ToolButtonClass","synthetic":false,"types":[]},{"text":"impl Send for ToolItemClass","synthetic":false,"types":[]},{"text":"impl Send for ToolItemGroupClass","synthetic":false,"types":[]},{"text":"impl Send for ToolPaletteClass","synthetic":false,"types":[]},{"text":"impl Send for ToolbarClass","synthetic":false,"types":[]},{"text":"impl Send for TooltipClass","synthetic":false,"types":[]},{"text":"impl Send for TreeModelFilterClass","synthetic":false,"types":[]},{"text":"impl Send for TreeModelSortClass","synthetic":false,"types":[]},{"text":"impl Send for TreeSelectionClass","synthetic":false,"types":[]},{"text":"impl Send for TreeStoreClass","synthetic":false,"types":[]},{"text":"impl Send for TreeViewClass","synthetic":false,"types":[]},{"text":"impl Send for TreeViewColumnClass","synthetic":false,"types":[]},{"text":"impl Send for ViewportClass","synthetic":false,"types":[]},{"text":"impl Send for VolumeButtonClass","synthetic":false,"types":[]},{"text":"impl Send for WidgetClass","synthetic":false,"types":[]},{"text":"impl Send for WindowClass","synthetic":false,"types":[]},{"text":"impl Send for WindowGroupClass","synthetic":false,"types":[]}];
implementors["gtk_sys"] = [{"text":"impl !Send for GtkBindingArg_d","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextAppearance_u1","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextAttributes_u1","synthetic":true,"types":[]},{"text":"impl !Send for GtkAboutDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAboutDialogPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkAccelGroupClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkAccelGroupEntry","synthetic":true,"types":[]},{"text":"impl Send for _GtkAccelGroupPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkAccelKey","synthetic":true,"types":[]},{"text":"impl !Send for GtkAccelLabelClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAccelLabelPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkAccelMapClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkActionBarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkActionBarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkActionClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkActionEntry","synthetic":true,"types":[]},{"text":"impl !Send for GtkActionGroupClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkActionGroupPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkActionPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkActionableInterface","synthetic":true,"types":[]},{"text":"impl Send for GtkActivatableIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkAdjustmentClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAdjustmentPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkAlignmentClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAlignmentPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkAppChooserButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAppChooserButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkAppChooserDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAppChooserDialogPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkAppChooserWidgetClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAppChooserWidgetPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkApplicationClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkApplicationPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkApplicationWindowClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkApplicationWindowPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkArrowAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkArrowAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkArrowClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkArrowPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkAspectFrameClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAspectFramePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkAssistantClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkAssistantPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkBinClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkBinPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkBindingArg","synthetic":true,"types":[]},{"text":"impl !Send for GtkBindingEntry","synthetic":true,"types":[]},{"text":"impl !Send for GtkBindingSet","synthetic":true,"types":[]},{"text":"impl !Send for GtkBindingSignal","synthetic":true,"types":[]},{"text":"impl !Send for GtkBooleanCellAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkBooleanCellAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkBorder","synthetic":true,"types":[]},{"text":"impl !Send for GtkBoxClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkBoxPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkBuildableIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkBuilderClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkBuilderPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkButtonAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkButtonAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkButtonBoxClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkButtonBoxPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCalendarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCalendarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for GtkCellAccessibleParentIface","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellAreaBoxClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellAreaBoxPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellAreaClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellAreaContextClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellAreaContextPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellAreaPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkCellEditableIface","synthetic":true,"types":[]},{"text":"impl Send for GtkCellLayoutIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererAccelClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererAccelPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererClassPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererComboClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererComboPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererPixbufClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererPixbufPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererProgressClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererProgressPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererSpinClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererSpinPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererSpinnerClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererSpinnerPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererTextClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererTextPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererToggleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellRendererTogglePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellViewClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCellViewPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCheckButtonClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkCheckMenuItemAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCheckMenuItemAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCheckMenuItemClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCheckMenuItemPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkColorButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorChooserDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkColorChooserDialogPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorChooserInterface","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorChooserWidgetClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkColorChooserWidgetPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorSelectionClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorSelectionDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkColorSelectionDialogPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkColorSelectionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkComboBoxAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkComboBoxAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkComboBoxClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkComboBoxPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkComboBoxTextClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkComboBoxTextPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkContainerAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkContainerAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkContainerCellAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkContainerCellAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkContainerClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkContainerPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkCssProviderClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkCssProviderPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkCssSection","synthetic":true,"types":[]},{"text":"impl !Send for GtkDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkDialogPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkDrawingAreaClass","synthetic":true,"types":[]},{"text":"impl Send for GtkEditableInterface","synthetic":true,"types":[]},{"text":"impl !Send for GtkEntryAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkEntryAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkEntryBufferClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkEntryBufferPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkEntryClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkEntryCompletionClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkEntryCompletionPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkEntryPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkEventBoxClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkEventBoxPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkEventControllerClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkEventControllerKeyClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkEventControllerMotionClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkEventControllerScrollClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkExpanderAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkExpanderAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkExpanderClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkExpanderPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFileChooserButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFileChooserButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFileChooserDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFileChooserDialogPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFileChooserNativeClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkFileChooserWidgetClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFileChooserWidgetPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFileFilterInfo","synthetic":true,"types":[]},{"text":"impl !Send for GtkFixedChild","synthetic":true,"types":[]},{"text":"impl !Send for GtkFixedClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFixedPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFlowBoxAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFlowBoxAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFlowBoxChildAccessibleClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkFlowBoxChildClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkFlowBoxClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFontButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontChooserDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFontChooserDialogPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontChooserIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontChooserWidgetClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFontChooserWidgetPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontSelectionClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontSelectionDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFontSelectionDialogPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkFontSelectionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFrameAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFrameAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkFrameClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkFramePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkGLAreaClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureDragClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureLongPressClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureMultiPressClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGesturePanClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureRotateClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureSingleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureStylusClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureSwipeClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGestureZoomClass","synthetic":true,"types":[]},{"text":"impl Send for GtkGradient","synthetic":true,"types":[]},{"text":"impl !Send for GtkGridClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkGridPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkHBoxClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkHButtonBoxClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkHPanedClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkHSVClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkHSVPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkHScaleClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkHScrollbarClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkHSeparatorClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkHandleBoxClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkHandleBoxPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkHeaderBarAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkHeaderBarAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkHeaderBarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkHeaderBarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkIMContextClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkIMContextInfo","synthetic":true,"types":[]},{"text":"impl !Send for GtkIMContextSimpleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkIMContextSimplePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkIMMulticontextClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkIMMulticontextPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkIconFactoryClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkIconFactoryPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkIconInfoClass","synthetic":true,"types":[]},{"text":"impl Send for GtkIconSet","synthetic":true,"types":[]},{"text":"impl Send for GtkIconSource","synthetic":true,"types":[]},{"text":"impl !Send for GtkIconThemeClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkIconThemePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkIconViewAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkIconViewAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkIconViewClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkIconViewPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkImageAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkImageAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkImageCellAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkImageCellAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkImageClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkImageMenuItemClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkImageMenuItemPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkImagePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkInfoBarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkInfoBarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkInvisibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkInvisiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkLabelAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLabelAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkLabelClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLabelPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkLabelSelectionInfo","synthetic":true,"types":[]},{"text":"impl !Send for GtkLayoutClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLayoutPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkLevelBarAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLevelBarAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkLevelBarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLevelBarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkLinkButtonAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLinkButtonAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkLinkButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLinkButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkListBoxAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkListBoxAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkListBoxClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkListBoxRowAccessibleClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkListBoxRowClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkListStoreClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkListStorePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkLockButtonAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLockButtonAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkLockButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkLockButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuBarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuBarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuButtonAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuButtonAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuItemAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuItemAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuItemClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuItemPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuShellAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuShellAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuShellClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuShellPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuToolButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMenuToolButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMessageDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMessageDialogPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMiscClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMiscPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkMountOperationClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkMountOperationPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkNativeDialogClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkNotebookAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkNotebookAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkNotebookClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkNotebookPageAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkNotebookPageAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkNotebookPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkNumerableIconClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkNumerableIconPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkOffscreenWindowClass","synthetic":true,"types":[]},{"text":"impl Send for GtkOrientableIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkOverlayClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkOverlayPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkPadActionEntry","synthetic":true,"types":[]},{"text":"impl Send for _GtkPadControllerClass","synthetic":true,"types":[]},{"text":"impl Send for GtkPageRange","synthetic":true,"types":[]},{"text":"impl !Send for GtkPanedAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkPanedAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkPanedClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkPanedPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkPaperSize","synthetic":true,"types":[]},{"text":"impl Send for _GtkPlacesSidebarClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkPlugClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkPlugPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkPopoverAccessibleClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkPopoverClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkPopoverMenuClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkPopoverPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkPrintOperationClass","synthetic":true,"types":[]},{"text":"impl Send for GtkPrintOperationPreviewIface","synthetic":true,"types":[]},{"text":"impl Send for _GtkPrintOperationPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkProgressBarAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkProgressBarAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkProgressBarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkProgressBarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioActionClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioActionEntry","synthetic":true,"types":[]},{"text":"impl Send for _GtkRadioActionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioButtonAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRadioButtonAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRadioButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioMenuItemAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRadioMenuItemAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioMenuItemClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRadioMenuItemPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioToolButtonClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkRangeAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRangeAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRangeClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRangePrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkRcContext","synthetic":true,"types":[]},{"text":"impl !Send for GtkRcProperty","synthetic":true,"types":[]},{"text":"impl !Send for GtkRcStyleClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentActionClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRecentActionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentChooserDialogClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRecentChooserDialogPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkRecentChooserIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentChooserMenuClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRecentChooserMenuPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentChooserWidgetClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRecentChooserWidgetPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentData","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentFilterInfo","synthetic":true,"types":[]},{"text":"impl Send for GtkRecentInfo","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentManagerClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRecentManagerPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRendererCellAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkRendererCellAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkRequestedSize","synthetic":true,"types":[]},{"text":"impl Send for GtkRequisition","synthetic":true,"types":[]},{"text":"impl !Send for GtkRevealerClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkScaleAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkScaleAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkScaleButtonAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkScaleButtonAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkScaleButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkScaleButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkScaleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkScalePrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkScrollableInterface","synthetic":true,"types":[]},{"text":"impl !Send for GtkScrollbarClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkScrolledWindowAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkScrolledWindowAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkScrolledWindowClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkScrolledWindowPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSearchBarClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkSearchEntryClass","synthetic":true,"types":[]},{"text":"impl Send for GtkSelectionData","synthetic":true,"types":[]},{"text":"impl !Send for GtkSeparatorClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkSeparatorMenuItemClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSeparatorPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSeparatorToolItemClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSeparatorToolItemPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSettingsClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSettingsPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSettingsValue","synthetic":true,"types":[]},{"text":"impl Send for _GtkShortcutLabelClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkShortcutsGroupClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkShortcutsSectionClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkShortcutsShortcutClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkShortcutsWindowClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkSizeGroupClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSizeGroupPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSocketClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSocketPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSpinButtonAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSpinButtonAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSpinButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSpinButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSpinnerAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSpinnerAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSpinnerClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSpinnerPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkStackAccessibleClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkStackClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkStackSidebarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkStackSidebarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkStackSwitcherClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkStatusIconClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkStatusIconPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkStatusbarAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkStatusbarAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkStatusbarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkStatusbarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkStockItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkStyleClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkStyleContextClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkStyleContextPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkStylePropertiesClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkStylePropertiesPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkStyleProviderIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkSwitchAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSwitchAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkSwitchClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkSwitchPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkSymbolicColor","synthetic":true,"types":[]},{"text":"impl !Send for GtkTableChild","synthetic":true,"types":[]},{"text":"impl !Send for GtkTableClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTablePrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkTableRowCol","synthetic":true,"types":[]},{"text":"impl !Send for GtkTargetEntry","synthetic":true,"types":[]},{"text":"impl Send for GtkTargetList","synthetic":true,"types":[]},{"text":"impl !Send for GtkTargetPair","synthetic":true,"types":[]},{"text":"impl !Send for GtkTearoffMenuItemClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTearoffMenuItemPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkTextAppearance","synthetic":true,"types":[]},{"text":"impl Send for GtkTextAttributes","synthetic":true,"types":[]},{"text":"impl Send for _GtkTextBTree","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextBufferClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTextBufferPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextCellAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTextCellAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextChildAnchorClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextIter","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextMarkClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextTagClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTextTagPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextTagTableClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTextTagTablePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextViewAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTextViewAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextViewClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTextViewPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkThemeEngine","synthetic":true,"types":[]},{"text":"impl !Send for GtkThemingEngineClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkThemingEnginePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleActionClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleActionEntry","synthetic":true,"types":[]},{"text":"impl Send for _GtkToggleActionPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleButtonAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkToggleButtonAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkToggleButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleToolButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkToggleToolButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolButtonClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkToolButtonPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolItemClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolItemGroupClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkToolItemGroupPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkToolItemPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolPaletteClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkToolPalettePrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkToolShellIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolbarClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkToolbarPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkToplevelAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkToplevelAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeDragDestIface","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeDragSourceIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeIter","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeModelFilterClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTreeModelFilterPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeModelIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeModelSortClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTreeModelSortPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkTreePath","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeRowReference","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeSelectionClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTreeSelectionPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeSortableIface","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeStoreClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTreeStorePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeViewAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTreeViewAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeViewClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeViewColumnClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkTreeViewColumnPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkTreeViewPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkUIManagerClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkUIManagerPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkVBoxClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkVButtonBoxClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkVPanedClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkVScaleClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkVScrollbarClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkVSeparatorClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkViewportClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkViewportPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkVolumeButtonClass","synthetic":true,"types":[]},{"text":"impl !Send for GtkWidgetAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkWidgetAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkWidgetClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkWidgetClassPrivate","synthetic":true,"types":[]},{"text":"impl Send for GtkWidgetPath","synthetic":true,"types":[]},{"text":"impl Send for _GtkWidgetPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkWindowAccessibleClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkWindowAccessiblePrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkWindowClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkWindowGeometryInfo","synthetic":true,"types":[]},{"text":"impl !Send for GtkWindowGroupClass","synthetic":true,"types":[]},{"text":"impl Send for _GtkWindowGroupPrivate","synthetic":true,"types":[]},{"text":"impl Send for _GtkWindowPrivate","synthetic":true,"types":[]},{"text":"impl !Send for GtkAboutDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkAccelGroup","synthetic":true,"types":[]},{"text":"impl !Send for GtkAccelLabel","synthetic":true,"types":[]},{"text":"impl Send for GtkAccelMap","synthetic":true,"types":[]},{"text":"impl !Send for GtkAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkAction","synthetic":true,"types":[]},{"text":"impl !Send for GtkActionBar","synthetic":true,"types":[]},{"text":"impl !Send for GtkActionGroup","synthetic":true,"types":[]},{"text":"impl !Send for GtkAdjustment","synthetic":true,"types":[]},{"text":"impl !Send for GtkAlignment","synthetic":true,"types":[]},{"text":"impl !Send for GtkAppChooserButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkAppChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkAppChooserWidget","synthetic":true,"types":[]},{"text":"impl !Send for GtkApplication","synthetic":true,"types":[]},{"text":"impl !Send for GtkApplicationWindow","synthetic":true,"types":[]},{"text":"impl !Send for GtkArrow","synthetic":true,"types":[]},{"text":"impl !Send for GtkArrowAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkAspectFrame","synthetic":true,"types":[]},{"text":"impl !Send for GtkAssistant","synthetic":true,"types":[]},{"text":"impl !Send for GtkBin","synthetic":true,"types":[]},{"text":"impl !Send for GtkBooleanCellAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkBuilder","synthetic":true,"types":[]},{"text":"impl !Send for GtkButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkButtonAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkButtonBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkCalendar","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellArea","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellAreaBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellAreaContext","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRenderer","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererAccel","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererCombo","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererPixbuf","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererProgress","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererSpin","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererSpinner","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererText","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellRendererToggle","synthetic":true,"types":[]},{"text":"impl !Send for GtkCellView","synthetic":true,"types":[]},{"text":"impl !Send for GtkCheckButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkCheckMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkCheckMenuItemAccessible","synthetic":true,"types":[]},{"text":"impl Send for GtkClipboard","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorChooserWidget","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorSelection","synthetic":true,"types":[]},{"text":"impl !Send for GtkColorSelectionDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkComboBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkComboBoxAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkComboBoxText","synthetic":true,"types":[]},{"text":"impl !Send for GtkContainer","synthetic":true,"types":[]},{"text":"impl !Send for GtkContainerAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkContainerCellAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkCssProvider","synthetic":true,"types":[]},{"text":"impl !Send for GtkDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkDrawingArea","synthetic":true,"types":[]},{"text":"impl !Send for GtkEntry","synthetic":true,"types":[]},{"text":"impl !Send for GtkEntryAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkEntryBuffer","synthetic":true,"types":[]},{"text":"impl !Send for GtkEntryCompletion","synthetic":true,"types":[]},{"text":"impl Send for GtkEntryIconAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkEventBox","synthetic":true,"types":[]},{"text":"impl Send for GtkEventController","synthetic":true,"types":[]},{"text":"impl Send for GtkEventControllerKey","synthetic":true,"types":[]},{"text":"impl Send for GtkEventControllerMotion","synthetic":true,"types":[]},{"text":"impl Send for GtkEventControllerScroll","synthetic":true,"types":[]},{"text":"impl !Send for GtkExpander","synthetic":true,"types":[]},{"text":"impl !Send for GtkExpanderAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkFileChooserButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkFileChooserDialog","synthetic":true,"types":[]},{"text":"impl Send for GtkFileChooserNative","synthetic":true,"types":[]},{"text":"impl !Send for GtkFileChooserWidget","synthetic":true,"types":[]},{"text":"impl Send for GtkFileFilter","synthetic":true,"types":[]},{"text":"impl !Send for GtkFixed","synthetic":true,"types":[]},{"text":"impl !Send for GtkFlowBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkFlowBoxAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkFlowBoxChild","synthetic":true,"types":[]},{"text":"impl !Send for GtkFlowBoxChildAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontChooserWidget","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontSelection","synthetic":true,"types":[]},{"text":"impl !Send for GtkFontSelectionDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkFrame","synthetic":true,"types":[]},{"text":"impl !Send for GtkFrameAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkGLArea","synthetic":true,"types":[]},{"text":"impl Send for GtkGesture","synthetic":true,"types":[]},{"text":"impl Send for GtkGestureDrag","synthetic":true,"types":[]},{"text":"impl Send for GtkGestureLongPress","synthetic":true,"types":[]},{"text":"impl Send for GtkGestureMultiPress","synthetic":true,"types":[]},{"text":"impl Send for GtkGesturePan","synthetic":true,"types":[]},{"text":"impl Send for GtkGestureRotate","synthetic":true,"types":[]},{"text":"impl Send for GtkGestureSingle","synthetic":true,"types":[]},{"text":"impl Send for GtkGestureStylus","synthetic":true,"types":[]},{"text":"impl Send for GtkGestureSwipe","synthetic":true,"types":[]},{"text":"impl Send for GtkGestureZoom","synthetic":true,"types":[]},{"text":"impl !Send for GtkGrid","synthetic":true,"types":[]},{"text":"impl !Send for GtkHBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkHButtonBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkHPaned","synthetic":true,"types":[]},{"text":"impl !Send for GtkHSV","synthetic":true,"types":[]},{"text":"impl !Send for GtkHScale","synthetic":true,"types":[]},{"text":"impl !Send for GtkHScrollbar","synthetic":true,"types":[]},{"text":"impl !Send for GtkHSeparator","synthetic":true,"types":[]},{"text":"impl !Send for GtkHandleBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkHeaderBar","synthetic":true,"types":[]},{"text":"impl !Send for GtkHeaderBarAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkIMContext","synthetic":true,"types":[]},{"text":"impl !Send for GtkIMContextSimple","synthetic":true,"types":[]},{"text":"impl !Send for GtkIMMulticontext","synthetic":true,"types":[]},{"text":"impl !Send for GtkIconFactory","synthetic":true,"types":[]},{"text":"impl Send for GtkIconInfo","synthetic":true,"types":[]},{"text":"impl !Send for GtkIconTheme","synthetic":true,"types":[]},{"text":"impl !Send for GtkIconView","synthetic":true,"types":[]},{"text":"impl !Send for GtkIconViewAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkImage","synthetic":true,"types":[]},{"text":"impl !Send for GtkImageAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkImageCellAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkImageMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkInfoBar","synthetic":true,"types":[]},{"text":"impl !Send for GtkInvisible","synthetic":true,"types":[]},{"text":"impl !Send for GtkLabel","synthetic":true,"types":[]},{"text":"impl !Send for GtkLabelAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkLayout","synthetic":true,"types":[]},{"text":"impl !Send for GtkLevelBar","synthetic":true,"types":[]},{"text":"impl !Send for GtkLevelBarAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkLinkButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkLinkButtonAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkListBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkListBoxAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkListBoxRow","synthetic":true,"types":[]},{"text":"impl !Send for GtkListBoxRowAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkListStore","synthetic":true,"types":[]},{"text":"impl !Send for GtkLockButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkLockButtonAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenu","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuBar","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuButtonAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuItemAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuShell","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuShellAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkMenuToolButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkMessageDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkMisc","synthetic":true,"types":[]},{"text":"impl Send for GtkModelButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkMountOperation","synthetic":true,"types":[]},{"text":"impl !Send for GtkNativeDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkNotebook","synthetic":true,"types":[]},{"text":"impl !Send for GtkNotebookAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkNotebookPageAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkNumerableIcon","synthetic":true,"types":[]},{"text":"impl !Send for GtkOffscreenWindow","synthetic":true,"types":[]},{"text":"impl !Send for GtkOverlay","synthetic":true,"types":[]},{"text":"impl Send for GtkPadController","synthetic":true,"types":[]},{"text":"impl Send for GtkPageSetup","synthetic":true,"types":[]},{"text":"impl !Send for GtkPaned","synthetic":true,"types":[]},{"text":"impl !Send for GtkPanedAccessible","synthetic":true,"types":[]},{"text":"impl Send for GtkPlacesSidebar","synthetic":true,"types":[]},{"text":"impl !Send for GtkPlug","synthetic":true,"types":[]},{"text":"impl !Send for GtkPopover","synthetic":true,"types":[]},{"text":"impl !Send for GtkPopoverAccessible","synthetic":true,"types":[]},{"text":"impl Send for GtkPopoverMenu","synthetic":true,"types":[]},{"text":"impl Send for GtkPrintContext","synthetic":true,"types":[]},{"text":"impl !Send for GtkPrintOperation","synthetic":true,"types":[]},{"text":"impl Send for GtkPrintSettings","synthetic":true,"types":[]},{"text":"impl !Send for GtkProgressBar","synthetic":true,"types":[]},{"text":"impl !Send for GtkProgressBarAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioAction","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioButtonAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioMenuItemAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkRadioToolButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkRange","synthetic":true,"types":[]},{"text":"impl !Send for GtkRangeAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkRcStyle","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentAction","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentChooserDialog","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentChooserMenu","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentChooserWidget","synthetic":true,"types":[]},{"text":"impl Send for GtkRecentFilter","synthetic":true,"types":[]},{"text":"impl !Send for GtkRecentManager","synthetic":true,"types":[]},{"text":"impl !Send for GtkRendererCellAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkRevealer","synthetic":true,"types":[]},{"text":"impl !Send for GtkScale","synthetic":true,"types":[]},{"text":"impl !Send for GtkScaleAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkScaleButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkScaleButtonAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkScrollbar","synthetic":true,"types":[]},{"text":"impl !Send for GtkScrolledWindow","synthetic":true,"types":[]},{"text":"impl !Send for GtkScrolledWindowAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkSearchBar","synthetic":true,"types":[]},{"text":"impl !Send for GtkSearchEntry","synthetic":true,"types":[]},{"text":"impl !Send for GtkSeparator","synthetic":true,"types":[]},{"text":"impl !Send for GtkSeparatorMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkSeparatorToolItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkSettings","synthetic":true,"types":[]},{"text":"impl Send for GtkShortcutLabel","synthetic":true,"types":[]},{"text":"impl Send for GtkShortcutsGroup","synthetic":true,"types":[]},{"text":"impl Send for GtkShortcutsSection","synthetic":true,"types":[]},{"text":"impl Send for GtkShortcutsShortcut","synthetic":true,"types":[]},{"text":"impl !Send for GtkShortcutsWindow","synthetic":true,"types":[]},{"text":"impl !Send for GtkSizeGroup","synthetic":true,"types":[]},{"text":"impl !Send for GtkSocket","synthetic":true,"types":[]},{"text":"impl !Send for GtkSpinButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkSpinButtonAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkSpinner","synthetic":true,"types":[]},{"text":"impl !Send for GtkSpinnerAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkStack","synthetic":true,"types":[]},{"text":"impl !Send for GtkStackAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkStackSidebar","synthetic":true,"types":[]},{"text":"impl !Send for GtkStackSwitcher","synthetic":true,"types":[]},{"text":"impl !Send for GtkStatusIcon","synthetic":true,"types":[]},{"text":"impl !Send for GtkStatusbar","synthetic":true,"types":[]},{"text":"impl !Send for GtkStatusbarAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkStyle","synthetic":true,"types":[]},{"text":"impl !Send for GtkStyleContext","synthetic":true,"types":[]},{"text":"impl !Send for GtkStyleProperties","synthetic":true,"types":[]},{"text":"impl !Send for GtkSwitch","synthetic":true,"types":[]},{"text":"impl !Send for GtkSwitchAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkTable","synthetic":true,"types":[]},{"text":"impl !Send for GtkTearoffMenuItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextBuffer","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextCellAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextChildAnchor","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextMark","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextTag","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextTagTable","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextView","synthetic":true,"types":[]},{"text":"impl !Send for GtkTextViewAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkThemingEngine","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleAction","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleButtonAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkToggleToolButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolItem","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolItemGroup","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolPalette","synthetic":true,"types":[]},{"text":"impl !Send for GtkToolbar","synthetic":true,"types":[]},{"text":"impl Send for GtkTooltip","synthetic":true,"types":[]},{"text":"impl !Send for GtkToplevelAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeModelFilter","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeModelSort","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeSelection","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeStore","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeView","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeViewAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkTreeViewColumn","synthetic":true,"types":[]},{"text":"impl !Send for GtkUIManager","synthetic":true,"types":[]},{"text":"impl !Send for GtkVBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkVButtonBox","synthetic":true,"types":[]},{"text":"impl !Send for GtkVPaned","synthetic":true,"types":[]},{"text":"impl !Send for GtkVScale","synthetic":true,"types":[]},{"text":"impl !Send for GtkVScrollbar","synthetic":true,"types":[]},{"text":"impl !Send for GtkVSeparator","synthetic":true,"types":[]},{"text":"impl !Send for GtkViewport","synthetic":true,"types":[]},{"text":"impl !Send for GtkVolumeButton","synthetic":true,"types":[]},{"text":"impl !Send for GtkWidget","synthetic":true,"types":[]},{"text":"impl !Send for GtkWidgetAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkWindow","synthetic":true,"types":[]},{"text":"impl !Send for GtkWindowAccessible","synthetic":true,"types":[]},{"text":"impl !Send for GtkWindowGroup","synthetic":true,"types":[]},{"text":"impl Send for GtkActionable","synthetic":true,"types":[]},{"text":"impl Send for GtkActivatable","synthetic":true,"types":[]},{"text":"impl Send for GtkAppChooser","synthetic":true,"types":[]},{"text":"impl Send for GtkBuildable","synthetic":true,"types":[]},{"text":"impl Send for GtkCellAccessibleParent","synthetic":true,"types":[]},{"text":"impl Send for GtkCellEditable","synthetic":true,"types":[]},{"text":"impl Send for GtkCellLayout","synthetic":true,"types":[]},{"text":"impl Send for GtkColorChooser","synthetic":true,"types":[]},{"text":"impl Send for GtkEditable","synthetic":true,"types":[]},{"text":"impl Send for GtkFileChooser","synthetic":true,"types":[]},{"text":"impl Send for GtkFontChooser","synthetic":true,"types":[]},{"text":"impl Send for GtkOrientable","synthetic":true,"types":[]},{"text":"impl Send for GtkPrintOperationPreview","synthetic":true,"types":[]},{"text":"impl Send for GtkRecentChooser","synthetic":true,"types":[]},{"text":"impl Send for GtkScrollable","synthetic":true,"types":[]},{"text":"impl Send for GtkStyleProvider","synthetic":true,"types":[]},{"text":"impl Send for GtkToolShell","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeDragDest","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeDragSource","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeModel","synthetic":true,"types":[]},{"text":"impl Send for GtkTreeSortable","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Reason","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ReadySendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for PushPromise","synthetic":true,"types":[]},{"text":"impl Send for PushPromises","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendPushedResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendStream&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StreamId","synthetic":true,"types":[]},{"text":"impl Send for RecvStream","synthetic":true,"types":[]},{"text":"impl Send for FlowControl","synthetic":true,"types":[]},{"text":"impl Send for PingPong","synthetic":true,"types":[]},{"text":"impl Send for Ping","synthetic":true,"types":[]},{"text":"impl Send for Pong","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Send for RawIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for RawIterHash&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Send for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Send for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RawTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RawIntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RawDrain&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send&gt; Send for IterMut&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for RawOccupiedEntryMut&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T&gt; Send for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HeaderName","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl Send for HeaderValue","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Send for ToStrError","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Request&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for StatusCode","synthetic":true,"types":[]},{"text":"impl Send for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl Send for Authority","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Scheme","synthetic":true,"types":[]},{"text":"impl Send for Uri","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for InvalidUri","synthetic":true,"types":[]},{"text":"impl Send for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Send for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for ValueIterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for ValueDrain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Send for Idna","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Send for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Send for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Send for IoVec","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; Send for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Send for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; Send for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Send for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Send for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["language_tags"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for LanguageTag","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Send for can_filter","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for can_frame","synthetic":true,"types":[]},{"text":"impl Send for canfd_frame","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, S:&nbsp;Send&gt; Send for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawMutex&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockUpgradableReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GuardSend","synthetic":true,"types":[]},{"text":"impl !Send for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedMutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, G:&nbsp;GetThreadId + Send, T:&nbsp;?Sized + Send&gt; Send for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Send, T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]}];
implementors["lru_cache"] = [{"text":"impl&lt;K, V, S&gt; Send for LruCache&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Send for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl Send for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Send for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Send for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Send for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Send for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Send for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Send for MinReset","synthetic":true,"types":[]},{"text":"impl Send for ZeroReset","synthetic":true,"types":[]},{"text":"impl Send for FullReset","synthetic":true,"types":[]},{"text":"impl Send for InflateState","synthetic":true,"types":[]},{"text":"impl Send for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Send for MZFlush","synthetic":true,"types":[]},{"text":"impl Send for MZStatus","synthetic":true,"types":[]},{"text":"impl Send for MZError","synthetic":true,"types":[]},{"text":"impl Send for DataFormat","synthetic":true,"types":[]},{"text":"impl Send for StreamResult","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Send for PollOpt","synthetic":true,"types":[]},{"text":"impl Send for Ready","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Poll","synthetic":true,"types":[]},{"text":"impl Send for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnixReady","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":false,"types":[]},{"text":"impl Send for SetReadiness","synthetic":false,"types":[]}];
implementors["mio_uds"] = [{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl Send for TcpBuilder","synthetic":true,"types":[]},{"text":"impl Send for UdpBuilder","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]}];
implementors["object"] = [{"text":"impl Send for Architecture","synthetic":true,"types":[]},{"text":"impl Send for AddressSize","synthetic":true,"types":[]},{"text":"impl Send for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Send for SectionKind","synthetic":true,"types":[]},{"text":"impl Send for ComdatKind","synthetic":true,"types":[]},{"text":"impl Send for SymbolKind","synthetic":true,"types":[]},{"text":"impl Send for SymbolScope","synthetic":true,"types":[]},{"text":"impl Send for RelocationKind","synthetic":true,"types":[]},{"text":"impl Send for RelocationEncoding","synthetic":true,"types":[]},{"text":"impl Send for FileFlags","synthetic":true,"types":[]},{"text":"impl Send for SectionFlags","synthetic":true,"types":[]},{"text":"impl&lt;Section&gt; Send for SymbolFlags&lt;Section&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Endianness","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]},{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for Bytes&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for StringTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for File&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for Segment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for Section&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for ComdatIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for Comdat&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for ComdatSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SymbolTable&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for Symbol&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for DynamicRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SectionRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Send for ArchiveKind","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ArchiveFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ArchiveMemberIterator&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ArchiveMember&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for CoffFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SectionTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SymbolTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSymbolTable&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSymbol&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffComdatIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffComdat&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffComdatSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for ElfFile&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSegmentIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSegment&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSectionIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSection&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSymbolTable&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSymbolIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSymbol&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RelocationSections","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfDynamicRelocationIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rela: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSectionRelocationIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rela: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfComdatIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfComdat&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfComdatSectionIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for NoteIterator&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for Note&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::NoteHeader: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Send for MachOFile&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOComdatIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOComdat&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOComdatSectionIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSegmentIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSegment&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Segment: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSectionIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSection&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Send for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSymbolTable&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSymbolIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSymbol&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachORelocationIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Pe&gt; Send for PeFile&lt;'data, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeComdatIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeComdat&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeComdatSectionIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSegmentIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSegment&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSectionIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSection&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for PeRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Send for NoDynamicRelocationIterator","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for FileKind","synthetic":true,"types":[]},{"text":"impl Send for SectionIndex","synthetic":true,"types":[]},{"text":"impl Send for SymbolIndex","synthetic":true,"types":[]},{"text":"impl Send for SymbolSection","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SymbolMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SymbolMapName&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ObjectMap&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ObjectMapEntry&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for Import&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for Export&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Send for Relocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for CompressedData&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompressionFormat","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FileHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FileHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Ident","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SectionHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SectionHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CompressionHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CompressionHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Sym32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Sym64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Syminfo32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Syminfo64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rel32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rela32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rel64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rela64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ProgramHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ProgramHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dyn32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dyn64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FatHeader","synthetic":true,"types":[]},{"text":"impl Send for FatArch32","synthetic":true,"types":[]},{"text":"impl Send for FatArch64","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for MachHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for MachHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LoadCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LcStr&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SegmentCommand32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SegmentCommand64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Section32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Section64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Fvmlib&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FvmlibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dylib&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubFrameworkCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubClientCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubUmbrellaCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubLibraryCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PreboundDylibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylinkerCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ThreadCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RoutinesCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RoutinesCommand_64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SymtabCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DysymtabCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibTableOfContents&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibModule32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibModule64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibReference&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for TwolevelHintsCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for TwolevelHint&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PrebindCksumCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UuidCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RpathCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LinkeditDataCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncryptionInfoCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncryptionInfoCommand64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for VersionMinCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BuildVersionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BuildToolVersion&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DyldInfoCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LinkerOptionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SymSegCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IdentCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FvmfileCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EntryPointCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SourceVersionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DataInCodeEntry&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Nlist32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Nlist64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Relocation&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RelocationInfo","synthetic":true,"types":[]},{"text":"impl Send for ScatteredRelocationInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageDosHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageOs2Header","synthetic":true,"types":[]},{"text":"impl Send for ImageVxdHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageFileHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageDataDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageOptionalHeader32","synthetic":true,"types":[]},{"text":"impl Send for ImageRomOptionalHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageOptionalHeader64","synthetic":true,"types":[]},{"text":"impl Send for ImageNtHeaders64","synthetic":true,"types":[]},{"text":"impl Send for ImageNtHeaders32","synthetic":true,"types":[]},{"text":"impl Send for ImageRomHeaders","synthetic":true,"types":[]},{"text":"impl Send for Guid","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeader","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeaderV2","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeaderBigobj","synthetic":true,"types":[]},{"text":"impl Send for ImageSectionHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbol","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolBytes","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolEx","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolExBytes","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolTokenDef","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolFunction","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolFunctionBeginEnd","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolWeak","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolSection","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolCrc","synthetic":true,"types":[]},{"text":"impl Send for ImageRelocation","synthetic":true,"types":[]},{"text":"impl Send for ImageLinenumber","synthetic":true,"types":[]},{"text":"impl Send for ImageBaseRelocation","synthetic":true,"types":[]},{"text":"impl Send for ImageArchiveMemberHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageExportDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageImportByName","synthetic":true,"types":[]},{"text":"impl Send for ImageTlsDirectory64","synthetic":true,"types":[]},{"text":"impl Send for ImageTlsDirectory32","synthetic":true,"types":[]},{"text":"impl Send for ImageImportDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageBoundImportDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageBoundForwarderRef","synthetic":true,"types":[]},{"text":"impl Send for ImageDelayloadDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectoryEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectoryString","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirStringU","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDataEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigCodeIntegrity","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocationTable","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation32","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation64","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation32V2","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation64V2","synthetic":true,"types":[]},{"text":"impl Send for ImagePrologueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageEpilogueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigDirectory32","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigDirectory64","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchBase","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchHashes","synthetic":true,"types":[]},{"text":"impl Send for ImageArmRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageArm64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageAlpha64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageAlphaRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveConfig32","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveConfig64","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveImport","synthetic":true,"types":[]},{"text":"impl Send for ImageDebugDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageCoffSymbolsHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageDebugMisc","synthetic":true,"types":[]},{"text":"impl Send for ImageFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageFunctionEntry64","synthetic":true,"types":[]},{"text":"impl Send for ImageSeparateDebugHeader","synthetic":true,"types":[]},{"text":"impl Send for NonPagedDebugInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageArchitectureEntry","synthetic":true,"types":[]},{"text":"impl Send for ImportObjectHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageCor20Header","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceBox&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OnceNonZeroUsize","synthetic":true,"types":[]},{"text":"impl Send for OnceBool","synthetic":true,"types":[]}];
implementors["pango"] = [{"text":"impl !Send for Context","synthetic":true,"types":[]},{"text":"impl !Send for EngineLang","synthetic":true,"types":[]},{"text":"impl !Send for EngineShape","synthetic":true,"types":[]},{"text":"impl !Send for Font","synthetic":true,"types":[]},{"text":"impl !Send for FontFace","synthetic":true,"types":[]},{"text":"impl !Send for FontFamily","synthetic":true,"types":[]},{"text":"impl !Send for FontMap","synthetic":true,"types":[]},{"text":"impl !Send for Fontset","synthetic":true,"types":[]},{"text":"impl !Send for FontsetSimple","synthetic":true,"types":[]},{"text":"impl !Send for Layout","synthetic":true,"types":[]},{"text":"impl !Send for Renderer","synthetic":true,"types":[]},{"text":"impl !Send for AttrIterator","synthetic":true,"types":[]},{"text":"impl !Send for AttrList","synthetic":true,"types":[]},{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for Color","synthetic":true,"types":[]},{"text":"impl !Send for FontDescription","synthetic":true,"types":[]},{"text":"impl !Send for FontMetrics","synthetic":true,"types":[]},{"text":"impl !Send for GlyphItem","synthetic":true,"types":[]},{"text":"impl !Send for GlyphItemIter","synthetic":true,"types":[]},{"text":"impl !Send for GlyphString","synthetic":true,"types":[]},{"text":"impl !Send for Item","synthetic":true,"types":[]},{"text":"impl !Send for LayoutIter","synthetic":true,"types":[]},{"text":"impl !Send for LayoutLine","synthetic":true,"types":[]},{"text":"impl !Send for Matrix","synthetic":true,"types":[]},{"text":"impl !Send for TabArray","synthetic":true,"types":[]},{"text":"impl Send for Alignment","synthetic":true,"types":[]},{"text":"impl Send for AttrType","synthetic":true,"types":[]},{"text":"impl Send for BidiType","synthetic":true,"types":[]},{"text":"impl Send for CoverageLevel","synthetic":true,"types":[]},{"text":"impl Send for Direction","synthetic":true,"types":[]},{"text":"impl Send for EllipsizeMode","synthetic":true,"types":[]},{"text":"impl Send for Gravity","synthetic":true,"types":[]},{"text":"impl Send for GravityHint","synthetic":true,"types":[]},{"text":"impl Send for RenderPart","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]},{"text":"impl Send for Stretch","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl Send for TabAlign","synthetic":true,"types":[]},{"text":"impl Send for Underline","synthetic":true,"types":[]},{"text":"impl Send for Variant","synthetic":true,"types":[]},{"text":"impl Send for Weight","synthetic":true,"types":[]},{"text":"impl Send for WrapMode","synthetic":true,"types":[]},{"text":"impl Send for FontMask","synthetic":true,"types":[]},{"text":"impl !Send for Analysis","synthetic":true,"types":[]},{"text":"impl !Send for AttrClass","synthetic":true,"types":[]},{"text":"impl !Send for Language","synthetic":true,"types":[]},{"text":"impl Send for Rectangle","synthetic":true,"types":[]},{"text":"impl !Send for GlyphInfo","synthetic":true,"types":[]},{"text":"impl Send for GlyphGeometry","synthetic":true,"types":[]},{"text":"impl !Send for Coverage","synthetic":true,"types":[]},{"text":"impl Send for ContextClass","synthetic":false,"types":[]},{"text":"impl Send for EngineLangClass","synthetic":false,"types":[]},{"text":"impl Send for EngineShapeClass","synthetic":false,"types":[]},{"text":"impl Send for FontClass","synthetic":false,"types":[]},{"text":"impl Send for FontFaceClass","synthetic":false,"types":[]},{"text":"impl Send for FontFamilyClass","synthetic":false,"types":[]},{"text":"impl Send for FontMapClass","synthetic":false,"types":[]},{"text":"impl Send for FontsetClass","synthetic":false,"types":[]},{"text":"impl Send for FontsetSimpleClass","synthetic":false,"types":[]},{"text":"impl Send for LayoutClass","synthetic":false,"types":[]},{"text":"impl Send for RendererClass","synthetic":false,"types":[]}];
implementors["pango_sys"] = [{"text":"impl !Send for PangoAnalysis","synthetic":true,"types":[]},{"text":"impl Send for PangoAttrClass","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrColor","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrFloat","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrFontDesc","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrFontFeatures","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrInt","synthetic":true,"types":[]},{"text":"impl Send for PangoAttrIterator","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrLanguage","synthetic":true,"types":[]},{"text":"impl Send for PangoAttrList","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrShape","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrSize","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttrString","synthetic":true,"types":[]},{"text":"impl !Send for PangoAttribute","synthetic":true,"types":[]},{"text":"impl Send for PangoColor","synthetic":true,"types":[]},{"text":"impl Send for _PangoContextClass","synthetic":true,"types":[]},{"text":"impl !Send for PangoEngineClass","synthetic":true,"types":[]},{"text":"impl !Send for PangoEngineInfo","synthetic":true,"types":[]},{"text":"impl !Send for PangoEngineLangClass","synthetic":true,"types":[]},{"text":"impl !Send for PangoEngineScriptInfo","synthetic":true,"types":[]},{"text":"impl !Send for PangoEngineShapeClass","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontClass","synthetic":true,"types":[]},{"text":"impl Send for PangoFontDescription","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontFaceClass","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontFamilyClass","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontMapClass","synthetic":true,"types":[]},{"text":"impl Send for PangoFontMetrics","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontsetClass","synthetic":true,"types":[]},{"text":"impl Send for _PangoFontsetSimpleClass","synthetic":true,"types":[]},{"text":"impl Send for PangoGlyphGeometry","synthetic":true,"types":[]},{"text":"impl Send for PangoGlyphInfo","synthetic":true,"types":[]},{"text":"impl !Send for PangoGlyphItem","synthetic":true,"types":[]},{"text":"impl !Send for PangoGlyphItemIter","synthetic":true,"types":[]},{"text":"impl !Send for PangoGlyphString","synthetic":true,"types":[]},{"text":"impl Send for PangoGlyphVisAttr","synthetic":true,"types":[]},{"text":"impl Send for PangoIncludedModule","synthetic":true,"types":[]},{"text":"impl !Send for PangoItem","synthetic":true,"types":[]},{"text":"impl Send for PangoLanguage","synthetic":true,"types":[]},{"text":"impl Send for _PangoLayoutClass","synthetic":true,"types":[]},{"text":"impl Send for PangoLayoutIter","synthetic":true,"types":[]},{"text":"impl !Send for PangoLayoutLine","synthetic":true,"types":[]},{"text":"impl Send for PangoLogAttr","synthetic":true,"types":[]},{"text":"impl Send for _PangoMap","synthetic":true,"types":[]},{"text":"impl Send for _PangoMapEntry","synthetic":true,"types":[]},{"text":"impl Send for PangoMatrix","synthetic":true,"types":[]},{"text":"impl Send for PangoRectangle","synthetic":true,"types":[]},{"text":"impl !Send for PangoRendererClass","synthetic":true,"types":[]},{"text":"impl Send for _PangoRendererPrivate","synthetic":true,"types":[]},{"text":"impl Send for PangoScriptIter","synthetic":true,"types":[]},{"text":"impl Send for PangoTabArray","synthetic":true,"types":[]},{"text":"impl Send for PangoContext","synthetic":true,"types":[]},{"text":"impl Send for PangoCoverage","synthetic":true,"types":[]},{"text":"impl !Send for PangoEngine","synthetic":true,"types":[]},{"text":"impl !Send for PangoEngineLang","synthetic":true,"types":[]},{"text":"impl !Send for PangoEngineShape","synthetic":true,"types":[]},{"text":"impl !Send for PangoFont","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontFace","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontFamily","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontMap","synthetic":true,"types":[]},{"text":"impl !Send for PangoFontset","synthetic":true,"types":[]},{"text":"impl Send for PangoFontsetSimple","synthetic":true,"types":[]},{"text":"impl Send for PangoLayout","synthetic":true,"types":[]},{"text":"impl !Send for PangoRenderer","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Send for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Send for Condvar","synthetic":true,"types":[]},{"text":"impl Send for OnceState","synthetic":true,"types":[]},{"text":"impl Send for Once","synthetic":true,"types":[]},{"text":"impl Send for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Send for RawMutex","synthetic":true,"types":[]},{"text":"impl Send for RawRwLock","synthetic":true,"types":[]},{"text":"impl Send for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Send for ParkResult","synthetic":true,"types":[]},{"text":"impl Send for UnparkResult","synthetic":true,"types":[]},{"text":"impl Send for RequeueOp","synthetic":true,"types":[]},{"text":"impl Send for FilterOp","synthetic":true,"types":[]},{"text":"impl Send for UnparkToken","synthetic":true,"types":[]},{"text":"impl Send for ParkToken","synthetic":true,"types":[]},{"text":"impl Send for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Send for YesS3","synthetic":true,"types":[]},{"text":"impl Send for NoS3","synthetic":true,"types":[]},{"text":"impl Send for YesS4","synthetic":true,"types":[]},{"text":"impl Send for NoS4","synthetic":true,"types":[]},{"text":"impl Send for YesA1","synthetic":true,"types":[]},{"text":"impl Send for NoA1","synthetic":true,"types":[]},{"text":"impl Send for YesA2","synthetic":true,"types":[]},{"text":"impl Send for NoA2","synthetic":true,"types":[]},{"text":"impl Send for YesNI","synthetic":true,"types":[]},{"text":"impl Send for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Send for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Send for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for vec128_storage","synthetic":true,"types":[]},{"text":"impl Send for vec256_storage","synthetic":true,"types":[]},{"text":"impl Send for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for IntoIter","synthetic":true,"types":[]},{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl !Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl !Send for SpanRange","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Send for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quick_xml"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesDecl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesEnd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for Bernoulli","synthetic":true,"types":[]},{"text":"impl Send for BernoulliError","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Cauchy","synthetic":true,"types":[]},{"text":"impl Send for Dirichlet","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for Beta","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Pareto","synthetic":true,"types":[]},{"text":"impl Send for Poisson","synthetic":true,"types":[]},{"text":"impl Send for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UniformDuration","synthetic":true,"types":[]},{"text":"impl Send for UnitCircle","synthetic":true,"types":[]},{"text":"impl Send for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Send for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WeightedError","synthetic":true,"types":[]},{"text":"impl Send for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Send for Open01","synthetic":true,"types":[]},{"text":"impl Send for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Send for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EntropyRng","synthetic":true,"types":[]},{"text":"impl Send for StepRng","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl Send for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Send for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Send for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]}];
implementors["resolv_conf"] = [{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for Network","synthetic":true,"types":[]},{"text":"impl Send for ScopedIp","synthetic":true,"types":[]},{"text":"impl Send for AddrParseError","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DomainIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Lookup","synthetic":true,"types":[]},{"text":"impl Send for Family","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Send for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TryDemangleError","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Send for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for BytesDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Send for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CharEscape","synthetic":true,"types":[]},{"text":"impl Send for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Serializer","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; Send for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]}];
implementors["sha1"] = [{"text":"impl Send for Sha1","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for DigestParseError","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Send for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Send for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl Send for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send + Array&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Send for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Send for SockAddr","synthetic":true,"types":[]},{"text":"impl Send for Socket","synthetic":true,"types":[]},{"text":"impl Send for Domain","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Await","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Send for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Send for FieldValue","synthetic":true,"types":[]},{"text":"impl !Send for Label","synthetic":true,"types":[]},{"text":"impl !Send for Arm","synthetic":true,"types":[]},{"text":"impl !Send for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for Item","synthetic":true,"types":[]},{"text":"impl !Send for ItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Send for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Send for ItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Send for ItemMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Send for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Send for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Send for ItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Send for ItemUse","synthetic":true,"types":[]},{"text":"impl !Send for UseTree","synthetic":true,"types":[]},{"text":"impl !Send for UsePath","synthetic":true,"types":[]},{"text":"impl !Send for UseName","synthetic":true,"types":[]},{"text":"impl !Send for UseRename","synthetic":true,"types":[]},{"text":"impl !Send for UseGlob","synthetic":true,"types":[]},{"text":"impl !Send for UseGroup","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for TraitItem","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ImplItem","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for Signature","synthetic":true,"types":[]},{"text":"impl !Send for FnArg","synthetic":true,"types":[]},{"text":"impl !Send for Receiver","synthetic":true,"types":[]},{"text":"impl !Send for File","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl !Send for Stmt","synthetic":true,"types":[]},{"text":"impl !Send for Local","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for Variadic","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Pat","synthetic":true,"types":[]},{"text":"impl !Send for PatBox","synthetic":true,"types":[]},{"text":"impl !Send for PatIdent","synthetic":true,"types":[]},{"text":"impl !Send for PatLit","synthetic":true,"types":[]},{"text":"impl !Send for PatMacro","synthetic":true,"types":[]},{"text":"impl !Send for PatOr","synthetic":true,"types":[]},{"text":"impl !Send for PatPath","synthetic":true,"types":[]},{"text":"impl !Send for PatRange","synthetic":true,"types":[]},{"text":"impl !Send for PatReference","synthetic":true,"types":[]},{"text":"impl !Send for PatRest","synthetic":true,"types":[]},{"text":"impl !Send for PatSlice","synthetic":true,"types":[]},{"text":"impl !Send for PatStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatTuple","synthetic":true,"types":[]},{"text":"impl !Send for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatType","synthetic":true,"types":[]},{"text":"impl !Send for PatWild","synthetic":true,"types":[]},{"text":"impl !Send for FieldPat","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl Send for AddBounds","synthetic":true,"types":[]},{"text":"impl Send for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; Send for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["threadpool"] = [{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Send for ArrayVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ArrayVecDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Send for SliceVec&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, 's, T&gt; Send for SliceVecDrain&lt;'p, 's, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for TinyVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Send for TinyVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;E&gt; Send for PollEvented&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; Send for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized, W:&nbsp;?Sized&gt; Send for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DuplexStream","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; Send for StreamReader&lt;S, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReaderStream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Send for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl Send for SendHalf","synthetic":true,"types":[]},{"text":"impl Send for RecvHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RecvHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SendHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedSendHalf","synthetic":true,"types":[]},{"text":"impl Send for OwnedRecvHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Send for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for UCred","synthetic":true,"types":[]},{"text":"impl Send for JoinError","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl Send for TryCurrentError","synthetic":true,"types":[]},{"text":"impl Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for SignalKind","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for StreamMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Barrier","synthetic":true,"types":[]},{"text":"impl Send for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl Send for ClosedError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for OwnedMutexGuard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryLockError","synthetic":true,"types":[]},{"text":"impl Send for Notify","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DelayQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Instant","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Elapsed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ReadHalf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for WriteHalf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for JoinHandle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Send for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Send for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodecError","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Datetime","synthetic":true,"types":[]},{"text":"impl Send for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl&lt;T&gt; Send for WithDispatch&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Instrumented&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entered&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for EnteredSpan","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for Dispatch","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Send for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Field","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl Send for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Current","synthetic":true,"types":[]},{"text":"impl Send for Interest","synthetic":true,"types":[]}];
implementors["tracing_futures"] = [{"text":"impl&lt;T&gt; Send for Instrumented&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["trust_dns_proto"] = [{"text":"impl Send for SslErrorStack","synthetic":true,"types":[]},{"text":"impl Send for Unspecified","synthetic":true,"types":[]},{"text":"impl Send for ProtoErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ProtoError","synthetic":true,"types":[]},{"text":"impl Send for Edns","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for MessageType","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for HeaderCounts","synthetic":true,"types":[]},{"text":"impl Send for NoopMessageFinalizer","synthetic":true,"types":[]},{"text":"impl Send for OpCode","synthetic":true,"types":[]},{"text":"impl Send for Query","synthetic":true,"types":[]},{"text":"impl Send for ResponseCode","synthetic":true,"types":[]},{"text":"impl Send for DNSClass","synthetic":true,"types":[]},{"text":"impl Send for Label","synthetic":true,"types":[]},{"text":"impl Send for Name","synthetic":true,"types":[]},{"text":"impl Send for DEFAULT","synthetic":true,"types":[]},{"text":"impl Send for IN_ADDR_ARPA","synthetic":true,"types":[]},{"text":"impl Send for IP6_ARPA","synthetic":true,"types":[]},{"text":"impl Send for LOCALHOST","synthetic":true,"types":[]},{"text":"impl Send for IN_ADDR_ARPA_127","synthetic":true,"types":[]},{"text":"impl Send for IP6_ARPA_1","synthetic":true,"types":[]},{"text":"impl Send for LOCAL","synthetic":true,"types":[]},{"text":"impl Send for IN_ADDR_ARPA_169_254","synthetic":true,"types":[]},{"text":"impl Send for IP6_ARPA_FE_8","synthetic":true,"types":[]},{"text":"impl Send for IP6_ARPA_FE_9","synthetic":true,"types":[]},{"text":"impl Send for IP6_ARPA_FE_B","synthetic":true,"types":[]},{"text":"impl Send for INVALID","synthetic":true,"types":[]},{"text":"impl Send for UserUsage","synthetic":true,"types":[]},{"text":"impl Send for AppUsage","synthetic":true,"types":[]},{"text":"impl Send for ResolverUsage","synthetic":true,"types":[]},{"text":"impl Send for CacheUsage","synthetic":true,"types":[]},{"text":"impl Send for AuthUsage","synthetic":true,"types":[]},{"text":"impl Send for OpUsage","synthetic":true,"types":[]},{"text":"impl Send for RegistryUsage","synthetic":true,"types":[]},{"text":"impl Send for ZoneUsage","synthetic":true,"types":[]},{"text":"impl Send for CAA","synthetic":true,"types":[]},{"text":"impl Send for Property","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for KeyValue","synthetic":true,"types":[]},{"text":"impl Send for MX","synthetic":true,"types":[]},{"text":"impl Send for NAPTR","synthetic":true,"types":[]},{"text":"impl Send for NULL","synthetic":true,"types":[]},{"text":"impl Send for OPENPGPKEY","synthetic":true,"types":[]},{"text":"impl Send for OPT","synthetic":true,"types":[]},{"text":"impl Send for EdnsCode","synthetic":true,"types":[]},{"text":"impl Send for EdnsOption","synthetic":true,"types":[]},{"text":"impl Send for SOA","synthetic":true,"types":[]},{"text":"impl Send for SRV","synthetic":true,"types":[]},{"text":"impl Send for SSHFP","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for FingerprintType","synthetic":true,"types":[]},{"text":"impl Send for TLSA","synthetic":true,"types":[]},{"text":"impl Send for CertUsage","synthetic":true,"types":[]},{"text":"impl Send for Selector","synthetic":true,"types":[]},{"text":"impl Send for Matching","synthetic":true,"types":[]},{"text":"impl Send for TXT","synthetic":true,"types":[]},{"text":"impl Send for RData","synthetic":true,"types":[]},{"text":"impl Send for RecordType","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for RecordSet","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for RrsetRecords&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BinDecoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BinEncoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EncodeMode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Restrict&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Verified&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TcpClientStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TcpClientConnect&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TcpStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, MF&gt; Send for UdpClientStream&lt;S, MF&gt;","synthetic":true,"types":[]},{"text":"impl Send for UdpResponse","synthetic":true,"types":[]},{"text":"impl&lt;S, MF&gt; Send for UdpClientConnect&lt;S, MF&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for UdpStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Send for DnsExchange&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, S, R&gt; Send for DnsExchangeConnect&lt;F, S, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for StreamHandle","synthetic":true,"types":[]},{"text":"impl Send for BasicDnsHandle","synthetic":true,"types":[]},{"text":"impl&lt;S, MF, D&gt; Send for DnsMultiplexer&lt;S, MF, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, S, MF&gt; Send for DnsMultiplexerConnect&lt;F, S, MF&gt;","synthetic":true,"types":[]},{"text":"impl Send for DnsMultiplexerSerialResponse","synthetic":true,"types":[]},{"text":"impl Send for DnsRequestOptions","synthetic":true,"types":[]},{"text":"impl Send for DnsRequest","synthetic":true,"types":[]},{"text":"impl Send for DnsResponse","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for RetryDnsHandle&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl Send for SerialMessage","synthetic":true,"types":[]},{"text":"impl Send for BufStreamHandle","synthetic":true,"types":[]},{"text":"impl Send for BufDnsStreamHandle","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for DnsRequestStreamHandle&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for BufDnsRequestStreamHandle&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for OneshotDnsRequest&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for OneshotDnsResponseReceiver&lt;F&gt;","synthetic":true,"types":[]}];
implementors["trust_dns_resolver"] = [{"text":"impl Send for AsyncResolver","synthetic":true,"types":[]},{"text":"impl&lt;F, G&gt; Send for Background&lt;F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResolverConfig","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]},{"text":"impl Send for NameServerConfig","synthetic":true,"types":[]},{"text":"impl Send for NameServerConfigGroup","synthetic":true,"types":[]},{"text":"impl Send for LookupIpStrategy","synthetic":true,"types":[]},{"text":"impl Send for ResolverOpts","synthetic":true,"types":[]},{"text":"impl Send for ResolveErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ResolveError","synthetic":true,"types":[]},{"text":"impl Send for Hosts","synthetic":true,"types":[]},{"text":"impl Send for Lookup","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LookupIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LookupRecordIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for LookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for SrvLookup","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for SrvLookupIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for SrvLookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for SrvLookupFuture","synthetic":true,"types":[]},{"text":"impl Send for ReverseLookup","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for ReverseLookupIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReverseLookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for ReverseLookupFuture","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Lookup","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for Ipv4LookupIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for Ipv4LookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for Ipv4LookupFuture","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Lookup","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for Ipv6LookupIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for Ipv6LookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for Ipv6LookupFuture","synthetic":true,"types":[]},{"text":"impl Send for MxLookup","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for MxLookupIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for MxLookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for MxLookupFuture","synthetic":true,"types":[]},{"text":"impl Send for TxtLookup","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for TxtLookupIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for TxtLookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for TxtLookupFuture","synthetic":true,"types":[]},{"text":"impl Send for SoaLookup","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for SoaLookupIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for SoaLookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for SoaLookupFuture","synthetic":true,"types":[]},{"text":"impl Send for NsLookup","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for NsLookupIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for NsLookupIntoIter","synthetic":true,"types":[]},{"text":"impl Send for NsLookupFuture","synthetic":true,"types":[]},{"text":"impl Send for LookupIp","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for LookupIpIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for LookupIpIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for LookupIpFuture&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Send for Resolver","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for BidiClass","synthetic":true,"types":[]},{"text":"impl Send for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Send for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Replacements&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Send for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl Send for GraphemeIncomplete","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; Send for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["woab"] = [{"text":"impl Send for BuilderFactory","synthetic":true,"types":[]},{"text":"impl !Send for BuilderConnector","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for ActorBuilder&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for ActorBuilderContext&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T, I&gt; Send for BuilderSingalConnector&lt;S, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; Send for SignalRouter&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Remove","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()